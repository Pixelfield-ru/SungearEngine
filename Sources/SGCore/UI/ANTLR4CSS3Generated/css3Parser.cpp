
// Generated from D:/Pixelfield/NativeSungearEngine/NativeSungearEngine/Externals/antlr4/css/css3Parser.g4 by ANTLR 4.13.1


#include "css3ParserListener.h"
#include "css3ParserVisitor.h"

#include "css3Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Css3ParserStaticData final {
  Css3ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Css3ParserStaticData(const Css3ParserStaticData&) = delete;
  Css3ParserStaticData(Css3ParserStaticData&&) = delete;
  Css3ParserStaticData& operator=(const Css3ParserStaticData&) = delete;
  Css3ParserStaticData& operator=(Css3ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag css3parserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
Css3ParserStaticData *css3parserParserStaticData = nullptr;

void css3parserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (css3parserParserStaticData != nullptr) {
    return;
  }
#else
  assert(css3parserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Css3ParserStaticData>(
    std::vector<std::string>{
      "stylesheet", "charset", "imports", "namespace_", "namespacePrefix", 
      "media", "mediaQueryList", "mediaQuery", "mediaType", "mediaExpression", 
      "mediaFeature", "page", "pseudoPage", "selectorGroup", "selector", 
      "combinator", "simpleSelectorSequence", "typeSelector", "typeNamespacePrefix", 
      "elementName", "universal", "className", "attrib", "pseudo", "functionalPseudo", 
      "expression", "negation", "negationArg", "operator_", "property_", 
      "ruleset", "declarationList", "declaration", "prio", "value", "expr", 
      "term", "function_", "dxImageTransform", "hexcolor", "number", "percentage", 
      "dimension", "unknownDimension", "any_", "atRule", "unused", "block", 
      "nestedStatement", "groupRuleBody", "supportsRule", "supportsCondition", 
      "supportsConditionInParens", "supportsNegation", "supportsConjunction", 
      "supportsDisjunction", "supportsDeclarationCondition", "generalEnclosed", 
      "url", "var_", "calc", "calcOperand", "calcExpr", "calcNestedValue", 
      "calcValue", "fontFaceRule", "fontFaceDeclaration", "keyframesRule", 
      "keyframeBlock", "keyframeSelector", "viewport", "counterStyle", "fontFeatureValuesRule", 
      "fontFamilyNameList", "fontFamilyName", "featureValueBlock", "featureType", 
      "featureValueDefinition", "ident", "ws", "color", "color_alpha", "color_component"
    },
    std::vector<std::string>{
      "", "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "'='", "':'", 
      "'.'", "'*'", "'/'", "'|'", "'_'", "", "", "", "'<!--'", "'-->'", 
      "'~='", "'|='", "", "", "", "", "", "'@charset '", "", "", "'url('", 
      "", "", "", "", "", "", "'+'", "'-'", "'>'", "','", "'~'", "", "", 
      "", "'^='", "'$='", "'*='", "", "", "", "", "", "", "'calc('", "'rgb('", 
      "'rgba('", "", "", "", "", "", "", "'var('"
    },
    std::vector<std::string>{
      "", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
      "CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
      "Pipe", "Underscore", "Comment", "Url", "Space", "Cdo", "Cdc", "Includes", 
      "DashMatch", "Hash", "Import", "Page", "Media", "Namespace", "Charset", 
      "Important", "Percentage", "Url_", "UnicodeRange", "MediaOnly", "Not", 
      "And", "Dimension", "UnknownDimension", "Plus", "Minus", "Greater", 
      "Comma", "Tilde", "PseudoNot", "Number", "String_", "PrefixMatch", 
      "SuffixMatch", "SubstringMatch", "FontFace", "Supports", "Or", "Keyframes", 
      "From", "To", "Calc", "Rgb", "Rgba", "Viewport", "CounterStyle", "FontFeatureValues", 
      "DxImageTransform", "AtKeyword", "Variable", "Var", "Ident", "Function_", 
      "UnexpectedCharacter"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,66,1187,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,1,0,1,0,5,0,
  	170,8,0,10,0,12,0,173,9,0,5,0,175,8,0,10,0,12,0,178,9,0,1,0,1,0,5,0,182,
  	8,0,10,0,12,0,185,9,0,5,0,187,8,0,10,0,12,0,190,9,0,1,0,1,0,5,0,194,8,
  	0,10,0,12,0,197,9,0,5,0,199,8,0,10,0,12,0,202,9,0,1,0,1,0,5,0,206,8,0,
  	10,0,12,0,209,9,0,5,0,211,8,0,10,0,12,0,214,9,0,1,0,1,0,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,230,8,1,1,2,1,2,1,2,1,2,3,2,236,
  	8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,247,8,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,3,2,257,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,266,8,2,1,2,
  	1,2,3,2,270,8,2,1,3,1,3,1,3,1,3,1,3,3,3,277,8,3,1,3,1,3,3,3,281,8,3,1,
  	3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,292,8,3,1,3,1,3,3,3,296,8,3,1,3,
  	1,3,3,3,300,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,
  	6,315,8,6,10,6,12,6,318,9,6,3,6,320,8,6,1,6,1,6,1,7,3,7,325,8,7,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,7,5,7,334,8,7,10,7,12,7,337,9,7,1,7,1,7,1,7,1,7,1,
  	7,5,7,344,8,7,10,7,12,7,347,9,7,3,7,349,8,7,1,8,1,8,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,9,3,9,360,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,3,11,
  	371,8,11,1,11,1,11,1,11,3,11,376,8,11,1,11,1,11,1,11,3,11,381,8,11,5,
  	11,383,8,11,10,11,12,11,386,9,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
  	13,1,13,1,13,1,13,1,13,5,13,400,8,13,10,13,12,13,403,9,13,1,14,1,14,1,
  	14,1,14,1,14,1,14,5,14,411,8,14,10,14,12,14,414,9,14,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,3,15,424,8,15,1,16,1,16,3,16,428,8,16,1,16,1,16,
  	1,16,1,16,1,16,5,16,435,8,16,10,16,12,16,438,9,16,1,16,1,16,1,16,1,16,
  	1,16,4,16,445,8,16,11,16,12,16,446,3,16,449,8,16,1,17,3,17,452,8,17,1,
  	17,1,17,1,18,1,18,3,18,458,8,18,1,18,1,18,1,19,1,19,1,20,3,20,465,8,20,
  	1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,3,22,475,8,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,3,22,483,8,22,1,22,1,22,3,22,487,8,22,1,22,1,22,1,23,1,
  	23,3,23,493,8,23,1,23,1,23,3,23,497,8,23,1,24,1,24,1,24,1,24,1,24,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,3,25,511,8,25,1,25,4,25,514,8,25,11,25,
  	12,25,515,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
  	3,27,530,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,540,8,28,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,551,8,29,1,30,1,30,1,
  	30,1,30,3,30,557,8,30,1,30,1,30,1,30,1,30,5,30,563,8,30,10,30,12,30,566,
  	9,30,1,30,1,30,1,30,3,30,571,8,30,1,30,1,30,1,30,3,30,576,8,30,1,31,1,
  	31,5,31,580,8,31,10,31,12,31,583,9,31,1,31,1,31,1,31,1,31,1,31,3,31,590,
  	8,31,5,31,592,8,31,10,31,12,31,595,9,31,1,32,1,32,1,32,1,32,1,32,3,32,
  	602,8,32,1,32,1,32,1,32,1,32,1,32,3,32,609,8,32,1,33,1,33,1,33,1,34,1,
  	34,1,34,1,34,4,34,618,8,34,11,34,12,34,619,1,35,1,35,3,35,624,8,35,1,
  	35,5,35,627,8,35,10,35,12,35,630,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,660,8,36,1,37,1,37,1,37,1,
  	37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,3,40,678,
  	8,40,1,40,1,40,1,41,3,41,683,8,41,1,41,1,41,1,42,3,42,688,8,42,1,42,1,
  	42,1,43,3,43,693,8,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,731,
  	8,44,10,44,12,44,734,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,743,
  	8,44,10,44,12,44,746,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,755,
  	8,44,10,44,12,44,758,9,44,1,44,1,44,1,44,3,44,763,8,44,1,45,1,45,1,45,
  	5,45,768,8,45,10,45,12,45,771,9,45,1,45,1,45,1,45,3,45,776,8,45,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,787,8,46,1,47,1,47,1,47,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,799,8,47,10,47,12,47,802,9,47,
  	1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
  	817,8,48,1,49,1,49,1,49,5,49,822,8,49,10,49,12,49,825,9,49,1,49,1,49,
  	1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,840,8,51,
  	1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,850,8,52,1,53,1,53,1,53,
  	1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,4,54,
  	868,8,54,11,54,12,54,869,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
  	1,55,4,55,882,8,55,11,55,12,55,883,1,56,1,56,1,56,1,56,1,56,1,57,1,57,
  	1,57,5,57,894,8,57,10,57,12,57,897,9,57,1,57,1,57,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,3,58,908,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,
  	1,60,1,60,1,60,1,60,1,60,1,61,5,61,924,8,61,10,61,12,61,927,9,61,1,61,
  	1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,939,8,62,10,62,12,62,
  	942,9,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
  	1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,967,8,64,
  	1,65,1,65,1,65,1,65,1,65,3,65,974,8,65,1,65,1,65,1,65,3,65,979,8,65,5,
  	65,981,8,65,10,65,12,65,984,9,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,
  	66,1,66,1,66,1,66,1,66,1,66,3,66,999,8,66,1,67,1,67,1,67,1,67,1,67,1,
  	67,1,67,1,67,1,67,5,67,1010,8,67,10,67,12,67,1013,9,67,1,67,1,67,1,67,
  	1,68,1,68,1,68,1,68,3,68,1022,8,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,
  	1,69,1,69,1,69,5,69,1034,8,69,10,69,12,69,1037,9,69,1,70,1,70,1,70,1,
  	70,1,70,3,70,1044,8,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,
  	71,3,71,1056,8,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,
  	72,1068,8,72,10,72,12,72,1071,9,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,
  	1,73,1,73,5,73,1082,8,73,10,73,12,73,1085,9,73,1,74,1,74,1,74,1,74,1,
  	74,5,74,1092,8,74,10,74,12,74,1095,9,74,3,74,1097,8,74,1,75,1,75,1,75,
  	1,75,1,75,3,75,1104,8,75,1,75,1,75,1,75,1,75,3,75,1110,8,75,5,75,1112,
  	8,75,10,75,12,75,1115,9,75,1,75,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,
  	77,1,77,1,77,1,77,1,77,5,77,1130,8,77,10,77,12,77,1133,9,77,1,78,1,78,
  	1,79,5,79,1138,8,79,10,79,12,79,1141,9,79,1,80,1,80,1,80,1,80,1,80,1,
  	80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1156,8,80,1,80,1,80,1,80,1,
  	80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1172,8,80,1,
  	80,1,80,1,80,3,80,1177,8,80,1,81,1,81,3,81,1181,8,81,1,82,1,82,3,82,1185,
  	8,82,1,82,0,0,83,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
  	38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
  	84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
  	124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
  	160,162,164,0,10,2,0,15,15,17,19,1,0,32,33,3,0,8,8,20,21,45,47,1,0,37,
  	38,2,0,3,3,65,65,2,0,11,12,37,38,2,0,29,29,52,53,4,0,32,34,50,50,52,53,
  	64,64,2,0,15,15,17,17,1,0,55,56,1291,0,166,1,0,0,0,2,229,1,0,0,0,4,269,
  	1,0,0,0,6,299,1,0,0,0,8,301,1,0,0,0,10,303,1,0,0,0,12,319,1,0,0,0,14,
  	348,1,0,0,0,16,350,1,0,0,0,18,352,1,0,0,0,20,364,1,0,0,0,22,367,1,0,0,
  	0,24,390,1,0,0,0,26,394,1,0,0,0,28,404,1,0,0,0,30,423,1,0,0,0,32,448,
  	1,0,0,0,34,451,1,0,0,0,36,457,1,0,0,0,38,461,1,0,0,0,40,464,1,0,0,0,42,
  	468,1,0,0,0,44,471,1,0,0,0,46,490,1,0,0,0,48,498,1,0,0,0,50,513,1,0,0,
  	0,52,517,1,0,0,0,54,529,1,0,0,0,56,539,1,0,0,0,58,550,1,0,0,0,60,575,
  	1,0,0,0,62,581,1,0,0,0,64,608,1,0,0,0,66,610,1,0,0,0,68,617,1,0,0,0,70,
  	621,1,0,0,0,72,659,1,0,0,0,74,661,1,0,0,0,76,667,1,0,0,0,78,673,1,0,0,
  	0,80,677,1,0,0,0,82,682,1,0,0,0,84,687,1,0,0,0,86,692,1,0,0,0,88,762,
  	1,0,0,0,90,764,1,0,0,0,92,786,1,0,0,0,94,788,1,0,0,0,96,816,1,0,0,0,98,
  	818,1,0,0,0,100,829,1,0,0,0,102,839,1,0,0,0,104,849,1,0,0,0,106,851,1,
  	0,0,0,108,857,1,0,0,0,110,871,1,0,0,0,112,885,1,0,0,0,114,890,1,0,0,0,
  	116,907,1,0,0,0,118,909,1,0,0,0,120,916,1,0,0,0,122,925,1,0,0,0,124,930,
  	1,0,0,0,126,945,1,0,0,0,128,966,1,0,0,0,130,968,1,0,0,0,132,998,1,0,0,
  	0,134,1000,1,0,0,0,136,1017,1,0,0,0,138,1026,1,0,0,0,140,1038,1,0,0,0,
  	142,1048,1,0,0,0,144,1060,1,0,0,0,146,1075,1,0,0,0,148,1096,1,0,0,0,150,
  	1098,1,0,0,0,152,1119,1,0,0,0,154,1121,1,0,0,0,156,1134,1,0,0,0,158,1139,
  	1,0,0,0,160,1176,1,0,0,0,162,1180,1,0,0,0,164,1184,1,0,0,0,166,176,3,
  	158,79,0,167,171,3,2,1,0,168,170,7,0,0,0,169,168,1,0,0,0,170,173,1,0,
  	0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,174,
  	167,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,188,1,
  	0,0,0,178,176,1,0,0,0,179,183,3,4,2,0,180,182,7,0,0,0,181,180,1,0,0,0,
  	182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,187,1,0,0,0,185,183,
  	1,0,0,0,186,179,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,
  	0,189,200,1,0,0,0,190,188,1,0,0,0,191,195,3,6,3,0,192,194,7,0,0,0,193,
  	192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,199,1,
  	0,0,0,197,195,1,0,0,0,198,191,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,
  	200,201,1,0,0,0,201,212,1,0,0,0,202,200,1,0,0,0,203,207,3,96,48,0,204,
  	206,7,0,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,
  	0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,210,203,1,0,0,0,211,214,1,0,0,0,
  	212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,
  	5,0,0,1,216,1,1,0,0,0,217,218,5,27,0,0,218,219,3,158,79,0,219,220,5,44,
  	0,0,220,221,3,158,79,0,221,222,5,7,0,0,222,223,3,158,79,0,223,230,1,0,
  	0,0,224,225,5,27,0,0,225,226,3,158,79,0,226,227,5,44,0,0,227,228,3,158,
  	79,0,228,230,1,0,0,0,229,217,1,0,0,0,229,224,1,0,0,0,230,3,1,0,0,0,231,
  	232,5,23,0,0,232,235,3,158,79,0,233,236,5,44,0,0,234,236,3,116,58,0,235,
  	233,1,0,0,0,235,234,1,0,0,0,236,237,1,0,0,0,237,238,3,158,79,0,238,239,
  	3,12,6,0,239,240,5,7,0,0,240,241,3,158,79,0,241,270,1,0,0,0,242,243,5,
  	23,0,0,243,246,3,158,79,0,244,247,5,44,0,0,245,247,3,116,58,0,246,244,
  	1,0,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,249,3,158,79,0,249,250,5,
  	7,0,0,250,251,3,158,79,0,251,270,1,0,0,0,252,253,5,23,0,0,253,256,3,158,
  	79,0,254,257,5,44,0,0,255,257,3,116,58,0,256,254,1,0,0,0,256,255,1,0,
  	0,0,257,258,1,0,0,0,258,259,3,158,79,0,259,260,3,12,6,0,260,270,1,0,0,
  	0,261,262,5,23,0,0,262,265,3,158,79,0,263,266,5,44,0,0,264,266,3,116,
  	58,0,265,263,1,0,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,268,3,158,79,
  	0,268,270,1,0,0,0,269,231,1,0,0,0,269,242,1,0,0,0,269,252,1,0,0,0,269,
  	261,1,0,0,0,270,5,1,0,0,0,271,272,5,26,0,0,272,276,3,158,79,0,273,274,
  	3,8,4,0,274,275,3,158,79,0,275,277,1,0,0,0,276,273,1,0,0,0,276,277,1,
  	0,0,0,277,280,1,0,0,0,278,281,5,44,0,0,279,281,3,116,58,0,280,278,1,0,
  	0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,283,3,158,79,0,283,284,5,7,0,
  	0,284,285,3,158,79,0,285,300,1,0,0,0,286,287,5,26,0,0,287,291,3,158,79,
  	0,288,289,3,8,4,0,289,290,3,158,79,0,290,292,1,0,0,0,291,288,1,0,0,0,
  	291,292,1,0,0,0,292,295,1,0,0,0,293,296,5,44,0,0,294,296,3,116,58,0,295,
  	293,1,0,0,0,295,294,1,0,0,0,296,297,1,0,0,0,297,298,3,158,79,0,298,300,
  	1,0,0,0,299,271,1,0,0,0,299,286,1,0,0,0,300,7,1,0,0,0,301,302,3,156,78,
  	0,302,9,1,0,0,0,303,304,5,25,0,0,304,305,3,158,79,0,305,306,3,12,6,0,
  	306,307,3,98,49,0,307,308,3,158,79,0,308,11,1,0,0,0,309,316,3,14,7,0,
  	310,311,5,40,0,0,311,312,3,158,79,0,312,313,3,14,7,0,313,315,1,0,0,0,
  	314,310,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,320,
  	1,0,0,0,318,316,1,0,0,0,319,309,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,
  	0,321,322,3,158,79,0,322,13,1,0,0,0,323,325,7,1,0,0,324,323,1,0,0,0,324,
  	325,1,0,0,0,325,326,1,0,0,0,326,327,3,158,79,0,327,328,3,16,8,0,328,335,
  	3,158,79,0,329,330,5,34,0,0,330,331,3,158,79,0,331,332,3,18,9,0,332,334,
  	1,0,0,0,333,329,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,
  	0,336,349,1,0,0,0,337,335,1,0,0,0,338,345,3,18,9,0,339,340,5,34,0,0,340,
  	341,3,158,79,0,341,342,3,18,9,0,342,344,1,0,0,0,343,339,1,0,0,0,344,347,
  	1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,
  	0,348,324,1,0,0,0,348,338,1,0,0,0,349,15,1,0,0,0,350,351,3,156,78,0,351,
  	17,1,0,0,0,352,353,5,3,0,0,353,354,3,158,79,0,354,359,3,20,10,0,355,356,
  	5,9,0,0,356,357,3,158,79,0,357,358,3,70,35,0,358,360,1,0,0,0,359,355,
  	1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,5,4,0,0,362,363,3,158,
  	79,0,363,19,1,0,0,0,364,365,3,156,78,0,365,366,3,158,79,0,366,21,1,0,
  	0,0,367,368,5,24,0,0,368,370,3,158,79,0,369,371,3,24,12,0,370,369,1,0,
  	0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,373,5,5,0,0,373,375,3,158,79,
  	0,374,376,3,64,32,0,375,374,1,0,0,0,375,376,1,0,0,0,376,384,1,0,0,0,377,
  	378,5,7,0,0,378,380,3,158,79,0,379,381,3,64,32,0,380,379,1,0,0,0,380,
  	381,1,0,0,0,381,383,1,0,0,0,382,377,1,0,0,0,383,386,1,0,0,0,384,382,1,
  	0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,388,5,6,0,0,
  	388,389,3,158,79,0,389,23,1,0,0,0,390,391,5,9,0,0,391,392,3,156,78,0,
  	392,393,3,158,79,0,393,25,1,0,0,0,394,401,3,28,14,0,395,396,5,40,0,0,
  	396,397,3,158,79,0,397,398,3,28,14,0,398,400,1,0,0,0,399,395,1,0,0,0,
  	400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,27,1,0,0,0,403,401,
  	1,0,0,0,404,405,3,32,16,0,405,412,3,158,79,0,406,407,3,30,15,0,407,408,
  	3,32,16,0,408,409,3,158,79,0,409,411,1,0,0,0,410,406,1,0,0,0,411,414,
  	1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,29,1,0,0,0,414,412,1,0,0,
  	0,415,416,5,37,0,0,416,424,3,158,79,0,417,418,5,39,0,0,418,424,3,158,
  	79,0,419,420,5,41,0,0,420,424,3,158,79,0,421,422,5,17,0,0,422,424,3,158,
  	79,0,423,415,1,0,0,0,423,417,1,0,0,0,423,419,1,0,0,0,423,421,1,0,0,0,
  	424,31,1,0,0,0,425,428,3,34,17,0,426,428,3,40,20,0,427,425,1,0,0,0,427,
  	426,1,0,0,0,428,436,1,0,0,0,429,435,5,22,0,0,430,435,3,42,21,0,431,435,
  	3,44,22,0,432,435,3,46,23,0,433,435,3,52,26,0,434,429,1,0,0,0,434,430,
  	1,0,0,0,434,431,1,0,0,0,434,432,1,0,0,0,434,433,1,0,0,0,435,438,1,0,0,
  	0,436,434,1,0,0,0,436,437,1,0,0,0,437,449,1,0,0,0,438,436,1,0,0,0,439,
  	445,5,22,0,0,440,445,3,42,21,0,441,445,3,44,22,0,442,445,3,46,23,0,443,
  	445,3,52,26,0,444,439,1,0,0,0,444,440,1,0,0,0,444,441,1,0,0,0,444,442,
  	1,0,0,0,444,443,1,0,0,0,445,446,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,
  	0,447,449,1,0,0,0,448,427,1,0,0,0,448,444,1,0,0,0,449,33,1,0,0,0,450,
  	452,3,36,18,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,454,
  	3,38,19,0,454,35,1,0,0,0,455,458,3,156,78,0,456,458,5,11,0,0,457,455,
  	1,0,0,0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,460,5,13,
  	0,0,460,37,1,0,0,0,461,462,3,156,78,0,462,39,1,0,0,0,463,465,3,36,18,
  	0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,467,5,11,0,0,467,
  	41,1,0,0,0,468,469,5,10,0,0,469,470,3,156,78,0,470,43,1,0,0,0,471,472,
  	5,1,0,0,472,474,3,158,79,0,473,475,3,36,18,0,474,473,1,0,0,0,474,475,
  	1,0,0,0,475,476,1,0,0,0,476,477,3,156,78,0,477,486,3,158,79,0,478,479,
  	7,2,0,0,479,482,3,158,79,0,480,483,3,156,78,0,481,483,5,44,0,0,482,480,
  	1,0,0,0,482,481,1,0,0,0,483,484,1,0,0,0,484,485,3,158,79,0,485,487,1,
  	0,0,0,486,478,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,489,5,2,0,0,
  	489,45,1,0,0,0,490,492,5,9,0,0,491,493,5,9,0,0,492,491,1,0,0,0,492,493,
  	1,0,0,0,493,496,1,0,0,0,494,497,3,156,78,0,495,497,3,48,24,0,496,494,
  	1,0,0,0,496,495,1,0,0,0,497,47,1,0,0,0,498,499,5,65,0,0,499,500,3,158,
  	79,0,500,501,3,50,25,0,501,502,5,4,0,0,502,49,1,0,0,0,503,511,5,37,0,
  	0,504,511,5,38,0,0,505,511,5,35,0,0,506,511,5,36,0,0,507,511,5,43,0,0,
  	508,511,5,44,0,0,509,511,3,156,78,0,510,503,1,0,0,0,510,504,1,0,0,0,510,
  	505,1,0,0,0,510,506,1,0,0,0,510,507,1,0,0,0,510,508,1,0,0,0,510,509,1,
  	0,0,0,511,512,1,0,0,0,512,514,3,158,79,0,513,510,1,0,0,0,514,515,1,0,
  	0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,51,1,0,0,0,517,518,5,42,0,0,518,
  	519,3,158,79,0,519,520,3,54,27,0,520,521,3,158,79,0,521,522,5,4,0,0,522,
  	53,1,0,0,0,523,530,3,34,17,0,524,530,3,40,20,0,525,530,5,22,0,0,526,530,
  	3,42,21,0,527,530,3,44,22,0,528,530,3,46,23,0,529,523,1,0,0,0,529,524,
  	1,0,0,0,529,525,1,0,0,0,529,526,1,0,0,0,529,527,1,0,0,0,529,528,1,0,0,
  	0,530,55,1,0,0,0,531,532,5,12,0,0,532,540,3,158,79,0,533,534,5,40,0,0,
  	534,540,3,158,79,0,535,536,5,17,0,0,536,540,3,158,79,0,537,538,5,8,0,
  	0,538,540,3,158,79,0,539,531,1,0,0,0,539,533,1,0,0,0,539,535,1,0,0,0,
  	539,537,1,0,0,0,540,57,1,0,0,0,541,542,3,156,78,0,542,543,3,158,79,0,
  	543,551,1,0,0,0,544,545,5,62,0,0,545,551,3,158,79,0,546,547,5,11,0,0,
  	547,551,3,156,78,0,548,549,5,14,0,0,549,551,3,156,78,0,550,541,1,0,0,
  	0,550,544,1,0,0,0,550,546,1,0,0,0,550,548,1,0,0,0,551,59,1,0,0,0,552,
  	553,3,26,13,0,553,554,5,5,0,0,554,556,3,158,79,0,555,557,3,62,31,0,556,
  	555,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,559,5,6,0,0,559,560,3,
  	158,79,0,560,576,1,0,0,0,561,563,3,88,44,0,562,561,1,0,0,0,563,566,1,
  	0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,
  	567,568,5,5,0,0,568,570,3,158,79,0,569,571,3,62,31,0,570,569,1,0,0,0,
  	570,571,1,0,0,0,571,572,1,0,0,0,572,573,5,6,0,0,573,574,3,158,79,0,574,
  	576,1,0,0,0,575,552,1,0,0,0,575,564,1,0,0,0,576,61,1,0,0,0,577,578,5,
  	7,0,0,578,580,3,158,79,0,579,577,1,0,0,0,580,583,1,0,0,0,581,579,1,0,
  	0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,581,1,0,0,0,584,585,3,64,32,0,
  	585,593,3,158,79,0,586,587,5,7,0,0,587,589,3,158,79,0,588,590,3,64,32,
  	0,589,588,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,0,591,586,1,0,0,0,592,
  	595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,63,1,0,0,0,595,593,1,
  	0,0,0,596,597,3,58,29,0,597,598,5,9,0,0,598,599,3,158,79,0,599,601,3,
  	70,35,0,600,602,3,66,33,0,601,600,1,0,0,0,601,602,1,0,0,0,602,609,1,0,
  	0,0,603,604,3,58,29,0,604,605,5,9,0,0,605,606,3,158,79,0,606,607,3,68,
  	34,0,607,609,1,0,0,0,608,596,1,0,0,0,608,603,1,0,0,0,609,65,1,0,0,0,610,
  	611,5,28,0,0,611,612,3,158,79,0,612,67,1,0,0,0,613,618,3,88,44,0,614,
  	618,3,94,47,0,615,616,5,61,0,0,616,618,3,158,79,0,617,613,1,0,0,0,617,
  	614,1,0,0,0,617,615,1,0,0,0,618,619,1,0,0,0,619,617,1,0,0,0,619,620,1,
  	0,0,0,620,69,1,0,0,0,621,628,3,72,36,0,622,624,3,56,28,0,623,622,1,0,
  	0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,627,3,72,36,0,626,623,1,0,0,0,
  	627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,71,1,0,0,0,630,628,
  	1,0,0,0,631,632,3,80,40,0,632,633,3,158,79,0,633,660,1,0,0,0,634,635,
  	3,82,41,0,635,636,3,158,79,0,636,660,1,0,0,0,637,638,3,84,42,0,638,639,
  	3,158,79,0,639,660,1,0,0,0,640,641,5,44,0,0,641,660,3,158,79,0,642,643,
  	5,31,0,0,643,660,3,158,79,0,644,645,3,156,78,0,645,646,3,158,79,0,646,
  	660,1,0,0,0,647,660,3,118,59,0,648,649,3,116,58,0,649,650,3,158,79,0,
  	650,660,1,0,0,0,651,660,3,78,39,0,652,660,3,120,60,0,653,660,3,74,37,
  	0,654,660,3,160,80,0,655,656,3,86,43,0,656,657,3,158,79,0,657,660,1,0,
  	0,0,658,660,3,76,38,0,659,631,1,0,0,0,659,634,1,0,0,0,659,637,1,0,0,0,
  	659,640,1,0,0,0,659,642,1,0,0,0,659,644,1,0,0,0,659,647,1,0,0,0,659,648,
  	1,0,0,0,659,651,1,0,0,0,659,652,1,0,0,0,659,653,1,0,0,0,659,654,1,0,0,
  	0,659,655,1,0,0,0,659,658,1,0,0,0,660,73,1,0,0,0,661,662,5,65,0,0,662,
  	663,3,158,79,0,663,664,3,70,35,0,664,665,5,4,0,0,665,666,3,158,79,0,666,
  	75,1,0,0,0,667,668,5,60,0,0,668,669,3,158,79,0,669,670,3,70,35,0,670,
  	671,5,4,0,0,671,672,3,158,79,0,672,77,1,0,0,0,673,674,5,22,0,0,674,675,
  	3,158,79,0,675,79,1,0,0,0,676,678,7,3,0,0,677,676,1,0,0,0,677,678,1,0,
  	0,0,678,679,1,0,0,0,679,680,5,43,0,0,680,81,1,0,0,0,681,683,7,3,0,0,682,
  	681,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,685,5,29,0,0,685,83,1,
  	0,0,0,686,688,7,3,0,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,
  	689,690,5,35,0,0,690,85,1,0,0,0,691,693,7,3,0,0,692,691,1,0,0,0,692,693,
  	1,0,0,0,693,694,1,0,0,0,694,695,5,36,0,0,695,87,1,0,0,0,696,697,3,156,
  	78,0,697,698,3,158,79,0,698,763,1,0,0,0,699,700,3,80,40,0,700,701,3,158,
  	79,0,701,763,1,0,0,0,702,703,3,82,41,0,703,704,3,158,79,0,704,763,1,0,
  	0,0,705,706,3,84,42,0,706,707,3,158,79,0,707,763,1,0,0,0,708,709,3,86,
  	43,0,709,710,3,158,79,0,710,763,1,0,0,0,711,712,5,44,0,0,712,763,3,158,
  	79,0,713,714,3,116,58,0,714,715,3,158,79,0,715,763,1,0,0,0,716,717,5,
  	22,0,0,717,763,3,158,79,0,718,719,5,31,0,0,719,763,3,158,79,0,720,721,
  	5,20,0,0,721,763,3,158,79,0,722,723,5,21,0,0,723,763,3,158,79,0,724,725,
  	5,9,0,0,725,763,3,158,79,0,726,727,5,65,0,0,727,732,3,158,79,0,728,731,
  	3,88,44,0,729,731,3,92,46,0,730,728,1,0,0,0,730,729,1,0,0,0,731,734,1,
  	0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,732,1,0,0,0,
  	735,736,5,4,0,0,736,737,3,158,79,0,737,763,1,0,0,0,738,739,5,3,0,0,739,
  	744,3,158,79,0,740,743,3,88,44,0,741,743,3,92,46,0,742,740,1,0,0,0,742,
  	741,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,747,1,
  	0,0,0,746,744,1,0,0,0,747,748,5,4,0,0,748,749,3,158,79,0,749,763,1,0,
  	0,0,750,751,5,1,0,0,751,756,3,158,79,0,752,755,3,88,44,0,753,755,3,92,
  	46,0,754,752,1,0,0,0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,
  	756,757,1,0,0,0,757,759,1,0,0,0,758,756,1,0,0,0,759,760,5,2,0,0,760,761,
  	3,158,79,0,761,763,1,0,0,0,762,696,1,0,0,0,762,699,1,0,0,0,762,702,1,
  	0,0,0,762,705,1,0,0,0,762,708,1,0,0,0,762,711,1,0,0,0,762,713,1,0,0,0,
  	762,716,1,0,0,0,762,718,1,0,0,0,762,720,1,0,0,0,762,722,1,0,0,0,762,724,
  	1,0,0,0,762,726,1,0,0,0,762,738,1,0,0,0,762,750,1,0,0,0,763,89,1,0,0,
  	0,764,765,5,61,0,0,765,769,3,158,79,0,766,768,3,88,44,0,767,766,1,0,0,
  	0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,775,1,0,0,0,771,
  	769,1,0,0,0,772,776,3,94,47,0,773,774,5,7,0,0,774,776,3,158,79,0,775,
  	772,1,0,0,0,775,773,1,0,0,0,776,91,1,0,0,0,777,787,3,94,47,0,778,779,
  	5,61,0,0,779,787,3,158,79,0,780,781,5,7,0,0,781,787,3,158,79,0,782,783,
  	5,18,0,0,783,787,3,158,79,0,784,785,5,19,0,0,785,787,3,158,79,0,786,777,
  	1,0,0,0,786,778,1,0,0,0,786,780,1,0,0,0,786,782,1,0,0,0,786,784,1,0,0,
  	0,787,93,1,0,0,0,788,789,5,5,0,0,789,800,3,158,79,0,790,799,3,62,31,0,
  	791,799,3,96,48,0,792,799,3,88,44,0,793,799,3,94,47,0,794,795,5,61,0,
  	0,795,799,3,158,79,0,796,797,5,7,0,0,797,799,3,158,79,0,798,790,1,0,0,
  	0,798,791,1,0,0,0,798,792,1,0,0,0,798,793,1,0,0,0,798,794,1,0,0,0,798,
  	796,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,803,1,
  	0,0,0,802,800,1,0,0,0,803,804,5,6,0,0,804,805,3,158,79,0,805,95,1,0,0,
  	0,806,817,3,60,30,0,807,817,3,10,5,0,808,817,3,22,11,0,809,817,3,130,
  	65,0,810,817,3,134,67,0,811,817,3,100,50,0,812,817,3,140,70,0,813,817,
  	3,142,71,0,814,817,3,144,72,0,815,817,3,90,45,0,816,806,1,0,0,0,816,807,
  	1,0,0,0,816,808,1,0,0,0,816,809,1,0,0,0,816,810,1,0,0,0,816,811,1,0,0,
  	0,816,812,1,0,0,0,816,813,1,0,0,0,816,814,1,0,0,0,816,815,1,0,0,0,817,
  	97,1,0,0,0,818,819,5,5,0,0,819,823,3,158,79,0,820,822,3,96,48,0,821,820,
  	1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,
  	0,825,823,1,0,0,0,826,827,5,6,0,0,827,828,3,158,79,0,828,99,1,0,0,0,829,
  	830,5,49,0,0,830,831,3,158,79,0,831,832,3,102,51,0,832,833,3,158,79,0,
  	833,834,3,98,49,0,834,101,1,0,0,0,835,840,3,106,53,0,836,840,3,108,54,
  	0,837,840,3,110,55,0,838,840,3,104,52,0,839,835,1,0,0,0,839,836,1,0,0,
  	0,839,837,1,0,0,0,839,838,1,0,0,0,840,103,1,0,0,0,841,842,5,3,0,0,842,
  	843,3,158,79,0,843,844,3,102,51,0,844,845,3,158,79,0,845,846,5,4,0,0,
  	846,850,1,0,0,0,847,850,3,112,56,0,848,850,3,114,57,0,849,841,1,0,0,0,
  	849,847,1,0,0,0,849,848,1,0,0,0,850,105,1,0,0,0,851,852,5,33,0,0,852,
  	853,3,158,79,0,853,854,5,17,0,0,854,855,3,158,79,0,855,856,3,104,52,0,
  	856,107,1,0,0,0,857,867,3,104,52,0,858,859,3,158,79,0,859,860,5,17,0,
  	0,860,861,3,158,79,0,861,862,5,34,0,0,862,863,3,158,79,0,863,864,5,17,
  	0,0,864,865,3,158,79,0,865,866,3,104,52,0,866,868,1,0,0,0,867,858,1,0,
  	0,0,868,869,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,109,1,0,0,0,871,
  	881,3,104,52,0,872,873,3,158,79,0,873,874,5,17,0,0,874,875,3,158,79,0,
  	875,876,5,50,0,0,876,877,3,158,79,0,877,878,5,17,0,0,878,879,3,158,79,
  	0,879,880,3,104,52,0,880,882,1,0,0,0,881,872,1,0,0,0,882,883,1,0,0,0,
  	883,881,1,0,0,0,883,884,1,0,0,0,884,111,1,0,0,0,885,886,5,3,0,0,886,887,
  	3,158,79,0,887,888,3,64,32,0,888,889,5,4,0,0,889,113,1,0,0,0,890,895,
  	7,4,0,0,891,894,3,88,44,0,892,894,3,92,46,0,893,891,1,0,0,0,893,892,1,
  	0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,
  	897,895,1,0,0,0,898,899,5,4,0,0,899,115,1,0,0,0,900,901,5,30,0,0,901,
  	902,3,158,79,0,902,903,5,44,0,0,903,904,3,158,79,0,904,905,5,4,0,0,905,
  	908,1,0,0,0,906,908,5,16,0,0,907,900,1,0,0,0,907,906,1,0,0,0,908,117,
  	1,0,0,0,909,910,5,63,0,0,910,911,3,158,79,0,911,912,5,62,0,0,912,913,
  	3,158,79,0,913,914,5,4,0,0,914,915,3,158,79,0,915,119,1,0,0,0,916,917,
  	5,54,0,0,917,918,3,158,79,0,918,919,3,124,62,0,919,920,5,4,0,0,920,921,
  	3,158,79,0,921,121,1,0,0,0,922,924,7,3,0,0,923,922,1,0,0,0,924,927,1,
  	0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,925,1,0,0,0,
  	928,929,3,128,64,0,929,123,1,0,0,0,930,940,3,122,61,0,931,932,5,17,0,
  	0,932,933,3,158,79,0,933,934,7,5,0,0,934,935,5,17,0,0,935,936,3,158,79,
  	0,936,937,3,122,61,0,937,939,1,0,0,0,938,931,1,0,0,0,939,942,1,0,0,0,
  	940,938,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,940,1,0,0,0,943,944,
  	3,158,79,0,944,125,1,0,0,0,945,946,5,3,0,0,946,947,3,158,79,0,947,948,
  	3,124,62,0,948,949,5,4,0,0,949,950,3,158,79,0,950,127,1,0,0,0,951,952,
  	3,80,40,0,952,953,3,158,79,0,953,967,1,0,0,0,954,955,3,84,42,0,955,956,
  	3,158,79,0,956,967,1,0,0,0,957,958,3,86,43,0,958,959,3,158,79,0,959,967,
  	1,0,0,0,960,961,3,82,41,0,961,962,3,158,79,0,962,967,1,0,0,0,963,964,
  	3,126,63,0,964,965,3,158,79,0,965,967,1,0,0,0,966,951,1,0,0,0,966,954,
  	1,0,0,0,966,957,1,0,0,0,966,960,1,0,0,0,966,963,1,0,0,0,967,129,1,0,0,
  	0,968,969,5,48,0,0,969,970,3,158,79,0,970,971,5,5,0,0,971,973,3,158,79,
  	0,972,974,3,132,66,0,973,972,1,0,0,0,973,974,1,0,0,0,974,982,1,0,0,0,
  	975,976,5,7,0,0,976,978,3,158,79,0,977,979,3,132,66,0,978,977,1,0,0,0,
  	978,979,1,0,0,0,979,981,1,0,0,0,980,975,1,0,0,0,981,984,1,0,0,0,982,980,
  	1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,0,984,982,1,0,0,0,985,986,5,6,0,
  	0,986,987,3,158,79,0,987,131,1,0,0,0,988,989,3,58,29,0,989,990,5,9,0,
  	0,990,991,3,158,79,0,991,992,3,70,35,0,992,999,1,0,0,0,993,994,3,58,29,
  	0,994,995,5,9,0,0,995,996,3,158,79,0,996,997,3,68,34,0,997,999,1,0,0,
  	0,998,988,1,0,0,0,998,993,1,0,0,0,999,133,1,0,0,0,1000,1001,5,51,0,0,
  	1001,1002,3,158,79,0,1002,1003,5,17,0,0,1003,1004,3,158,79,0,1004,1005,
  	3,156,78,0,1005,1006,3,158,79,0,1006,1007,5,5,0,0,1007,1011,3,158,79,
  	0,1008,1010,3,136,68,0,1009,1008,1,0,0,0,1010,1013,1,0,0,0,1011,1009,
  	1,0,0,0,1011,1012,1,0,0,0,1012,1014,1,0,0,0,1013,1011,1,0,0,0,1014,1015,
  	5,6,0,0,1015,1016,3,158,79,0,1016,135,1,0,0,0,1017,1018,3,138,69,0,1018,
  	1019,5,5,0,0,1019,1021,3,158,79,0,1020,1022,3,62,31,0,1021,1020,1,0,0,
  	0,1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1024,5,6,0,0,1024,1025,3,158,
  	79,0,1025,137,1,0,0,0,1026,1027,7,6,0,0,1027,1035,3,158,79,0,1028,1029,
  	5,40,0,0,1029,1030,3,158,79,0,1030,1031,7,6,0,0,1031,1032,3,158,79,0,
  	1032,1034,1,0,0,0,1033,1028,1,0,0,0,1034,1037,1,0,0,0,1035,1033,1,0,0,
  	0,1035,1036,1,0,0,0,1036,139,1,0,0,0,1037,1035,1,0,0,0,1038,1039,5,57,
  	0,0,1039,1040,3,158,79,0,1040,1041,5,5,0,0,1041,1043,3,158,79,0,1042,
  	1044,3,62,31,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,
  	1045,1046,5,6,0,0,1046,1047,3,158,79,0,1047,141,1,0,0,0,1048,1049,5,58,
  	0,0,1049,1050,3,158,79,0,1050,1051,3,156,78,0,1051,1052,3,158,79,0,1052,
  	1053,5,5,0,0,1053,1055,3,158,79,0,1054,1056,3,62,31,0,1055,1054,1,0,0,
  	0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,1058,5,6,0,0,1058,1059,3,158,
  	79,0,1059,143,1,0,0,0,1060,1061,5,59,0,0,1061,1062,3,158,79,0,1062,1063,
  	3,146,73,0,1063,1064,3,158,79,0,1064,1065,5,5,0,0,1065,1069,3,158,79,
  	0,1066,1068,3,150,75,0,1067,1066,1,0,0,0,1068,1071,1,0,0,0,1069,1067,
  	1,0,0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,1071,1069,1,0,0,0,1072,1073,
  	5,6,0,0,1073,1074,3,158,79,0,1074,145,1,0,0,0,1075,1083,3,148,74,0,1076,
  	1077,3,158,79,0,1077,1078,5,40,0,0,1078,1079,3,158,79,0,1079,1080,3,148,
  	74,0,1080,1082,1,0,0,0,1081,1076,1,0,0,0,1082,1085,1,0,0,0,1083,1081,
  	1,0,0,0,1083,1084,1,0,0,0,1084,147,1,0,0,0,1085,1083,1,0,0,0,1086,1097,
  	5,44,0,0,1087,1093,3,156,78,0,1088,1089,3,158,79,0,1089,1090,3,156,78,
  	0,1090,1092,1,0,0,0,1091,1088,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,
  	0,0,1093,1094,1,0,0,0,1094,1097,1,0,0,0,1095,1093,1,0,0,0,1096,1086,1,
  	0,0,0,1096,1087,1,0,0,0,1097,149,1,0,0,0,1098,1099,3,152,76,0,1099,1100,
  	3,158,79,0,1100,1101,5,5,0,0,1101,1103,3,158,79,0,1102,1104,3,154,77,
  	0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1113,1,0,0,0,1105,1106,3,158,
  	79,0,1106,1107,5,7,0,0,1107,1109,3,158,79,0,1108,1110,3,154,77,0,1109,
  	1108,1,0,0,0,1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,1105,1,0,0,0,1112,
  	1115,1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,1116,1,0,0,0,1115,
  	1113,1,0,0,0,1116,1117,5,6,0,0,1117,1118,3,158,79,0,1118,151,1,0,0,0,
  	1119,1120,5,61,0,0,1120,153,1,0,0,0,1121,1122,3,156,78,0,1122,1123,3,
  	158,79,0,1123,1124,5,9,0,0,1124,1125,3,158,79,0,1125,1131,3,80,40,0,1126,
  	1127,3,158,79,0,1127,1128,3,80,40,0,1128,1130,1,0,0,0,1129,1126,1,0,0,
  	0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,155,1,0,
  	0,0,1133,1131,1,0,0,0,1134,1135,7,7,0,0,1135,157,1,0,0,0,1136,1138,7,
  	8,0,0,1137,1136,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1139,1140,
  	1,0,0,0,1140,159,1,0,0,0,1141,1139,1,0,0,0,1142,1143,7,9,0,0,1143,1144,
  	3,158,79,0,1144,1145,3,164,82,0,1145,1146,5,40,0,0,1146,1147,3,158,79,
  	0,1147,1148,3,164,82,0,1148,1149,5,40,0,0,1149,1150,3,158,79,0,1150,1155,
  	3,164,82,0,1151,1152,5,40,0,0,1152,1153,3,158,79,0,1153,1154,3,162,81,
  	0,1154,1156,1,0,0,0,1155,1151,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,
  	0,0,1157,1158,5,4,0,0,1158,1159,3,158,79,0,1159,1177,1,0,0,0,1160,1161,
  	7,9,0,0,1161,1162,3,158,79,0,1162,1163,3,164,82,0,1163,1164,3,158,79,
  	0,1164,1165,3,164,82,0,1165,1166,3,158,79,0,1166,1171,3,164,82,0,1167,
  	1168,5,12,0,0,1168,1169,3,158,79,0,1169,1170,3,162,81,0,1170,1172,1,0,
  	0,0,1171,1167,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1174,5,
  	4,0,0,1174,1175,3,158,79,0,1175,1177,1,0,0,0,1176,1142,1,0,0,0,1176,1160,
  	1,0,0,0,1177,161,1,0,0,0,1178,1181,3,128,64,0,1179,1181,3,120,60,0,1180,
  	1178,1,0,0,0,1180,1179,1,0,0,0,1181,163,1,0,0,0,1182,1185,3,128,64,0,
  	1183,1185,3,120,60,0,1184,1182,1,0,0,0,1184,1183,1,0,0,0,1185,165,1,0,
  	0,0,117,171,176,183,188,195,200,207,212,229,235,246,256,265,269,276,280,
  	291,295,299,316,319,324,335,345,348,359,370,375,380,384,401,412,423,427,
  	434,436,444,446,448,451,457,464,474,482,486,492,496,510,515,529,539,550,
  	556,564,570,575,581,589,593,601,608,617,619,623,628,659,677,682,687,692,
  	730,732,742,744,754,756,762,769,775,786,798,800,816,823,839,849,869,883,
  	893,895,907,925,940,966,973,978,982,998,1011,1021,1035,1043,1055,1069,
  	1083,1093,1096,1103,1109,1113,1131,1139,1155,1171,1176,1180,1184
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  css3parserParserStaticData = staticData.release();
}

}

css3Parser::css3Parser(TokenStream *input) : css3Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

css3Parser::css3Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  css3Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *css3parserParserStaticData->atn, css3parserParserStaticData->decisionToDFA, css3parserParserStaticData->sharedContextCache, options);
}

css3Parser::~css3Parser() {
  delete _interpreter;
}

const atn::ATN& css3Parser::getATN() const {
  return *css3parserParserStaticData->atn;
}

std::string css3Parser::getGrammarFileName() const {
  return "css3Parser.g4";
}

const std::vector<std::string>& css3Parser::getRuleNames() const {
  return css3parserParserStaticData->ruleNames;
}

const dfa::Vocabulary& css3Parser::getVocabulary() const {
  return css3parserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView css3Parser::getSerializedATN() const {
  return css3parserParserStaticData->serializedATN;
}


//----------------- StylesheetContext ------------------------------------------------------------------

css3Parser::StylesheetContext::StylesheetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::WsContext* css3Parser::StylesheetContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::StylesheetContext::EOF() {
  return getToken(css3Parser::EOF, 0);
}

std::vector<css3Parser::CharsetContext *> css3Parser::StylesheetContext::charset() {
  return getRuleContexts<css3Parser::CharsetContext>();
}

css3Parser::CharsetContext* css3Parser::StylesheetContext::charset(size_t i) {
  return getRuleContext<css3Parser::CharsetContext>(i);
}

std::vector<css3Parser::ImportsContext *> css3Parser::StylesheetContext::imports() {
  return getRuleContexts<css3Parser::ImportsContext>();
}

css3Parser::ImportsContext* css3Parser::StylesheetContext::imports(size_t i) {
  return getRuleContext<css3Parser::ImportsContext>(i);
}

std::vector<css3Parser::Namespace_Context *> css3Parser::StylesheetContext::namespace_() {
  return getRuleContexts<css3Parser::Namespace_Context>();
}

css3Parser::Namespace_Context* css3Parser::StylesheetContext::namespace_(size_t i) {
  return getRuleContext<css3Parser::Namespace_Context>(i);
}

std::vector<css3Parser::NestedStatementContext *> css3Parser::StylesheetContext::nestedStatement() {
  return getRuleContexts<css3Parser::NestedStatementContext>();
}

css3Parser::NestedStatementContext* css3Parser::StylesheetContext::nestedStatement(size_t i) {
  return getRuleContext<css3Parser::NestedStatementContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Comment() {
  return getTokens(css3Parser::Comment);
}

tree::TerminalNode* css3Parser::StylesheetContext::Comment(size_t i) {
  return getToken(css3Parser::Comment, i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::StylesheetContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Cdo() {
  return getTokens(css3Parser::Cdo);
}

tree::TerminalNode* css3Parser::StylesheetContext::Cdo(size_t i) {
  return getToken(css3Parser::Cdo, i);
}

std::vector<tree::TerminalNode *> css3Parser::StylesheetContext::Cdc() {
  return getTokens(css3Parser::Cdc);
}

tree::TerminalNode* css3Parser::StylesheetContext::Cdc(size_t i) {
  return getToken(css3Parser::Cdc, i);
}


size_t css3Parser::StylesheetContext::getRuleIndex() const {
  return css3Parser::RuleStylesheet;
}

void css3Parser::StylesheetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStylesheet(this);
}

void css3Parser::StylesheetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStylesheet(this);
}


std::any css3Parser::StylesheetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitStylesheet(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::StylesheetContext* css3Parser::stylesheet() {
  StylesheetContext *_localctx = _tracker.createInstance<StylesheetContext>(_ctx, getState());
  enterRule(_localctx, 0, css3Parser::RuleStylesheet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(166);
    ws();
    setState(176);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Charset) {
      setState(167);
      charset();
      setState(171);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(168);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(173);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(178);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(188);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Import) {
      setState(179);
      imports();
      setState(183);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(180);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(185);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(190);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(200);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Namespace) {
      setState(191);
      namespace_();
      setState(195);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(192);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(197);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(202);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(212);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3332413584879726122) != 0) || _la == css3Parser::Ident

    || _la == css3Parser::Function_) {
      setState(203);
      nestedStatement();
      setState(207);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 950272) != 0)) {
        setState(204);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 950272) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(209);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(214);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(215);
    match(css3Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharsetContext ------------------------------------------------------------------

css3Parser::CharsetContext::CharsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::CharsetContext::getRuleIndex() const {
  return css3Parser::RuleCharset;
}

void css3Parser::CharsetContext::copyFrom(CharsetContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadCharsetContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadCharsetContext::Charset() {
  return getToken(css3Parser::Charset, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BadCharsetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BadCharsetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::BadCharsetContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::BadCharsetContext::BadCharsetContext(CharsetContext *ctx) { copyFrom(ctx); }

void css3Parser::BadCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadCharset(this);
}
void css3Parser::BadCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadCharset(this);
}

std::any css3Parser::BadCharsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitBadCharset(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GoodCharsetContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodCharsetContext::Charset() {
  return getToken(css3Parser::Charset, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GoodCharsetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GoodCharsetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::GoodCharsetContext::String_() {
  return getToken(css3Parser::String_, 0);
}

tree::TerminalNode* css3Parser::GoodCharsetContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

css3Parser::GoodCharsetContext::GoodCharsetContext(CharsetContext *ctx) { copyFrom(ctx); }

void css3Parser::GoodCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodCharset(this);
}
void css3Parser::GoodCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodCharset(this);
}

std::any css3Parser::GoodCharsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitGoodCharset(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::CharsetContext* css3Parser::charset() {
  CharsetContext *_localctx = _tracker.createInstance<CharsetContext>(_ctx, getState());
  enterRule(_localctx, 2, css3Parser::RuleCharset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(229);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::GoodCharsetContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(217);
      match(css3Parser::Charset);
      setState(218);
      ws();
      setState(219);
      match(css3Parser::String_);
      setState(220);
      ws();
      setState(221);
      match(css3Parser::SemiColon);
      setState(222);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::BadCharsetContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(224);
      match(css3Parser::Charset);
      setState(225);
      ws();
      setState(226);
      match(css3Parser::String_);
      setState(227);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportsContext ------------------------------------------------------------------

css3Parser::ImportsContext::ImportsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::ImportsContext::getRuleIndex() const {
  return css3Parser::RuleImports;
}

void css3Parser::ImportsContext::copyFrom(ImportsContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadImportContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadImportContext::Import() {
  return getToken(css3Parser::Import, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BadImportContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BadImportContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaQueryListContext* css3Parser::BadImportContext::mediaQueryList() {
  return getRuleContext<css3Parser::MediaQueryListContext>(0);
}

tree::TerminalNode* css3Parser::BadImportContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::BadImportContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::BadImportContext::BadImportContext(ImportsContext *ctx) { copyFrom(ctx); }

void css3Parser::BadImportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadImport(this);
}
void css3Parser::BadImportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadImport(this);
}

std::any css3Parser::BadImportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitBadImport(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GoodImportContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodImportContext::Import() {
  return getToken(css3Parser::Import, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GoodImportContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GoodImportContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaQueryListContext* css3Parser::GoodImportContext::mediaQueryList() {
  return getRuleContext<css3Parser::MediaQueryListContext>(0);
}

tree::TerminalNode* css3Parser::GoodImportContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

tree::TerminalNode* css3Parser::GoodImportContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::GoodImportContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::GoodImportContext::GoodImportContext(ImportsContext *ctx) { copyFrom(ctx); }

void css3Parser::GoodImportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodImport(this);
}
void css3Parser::GoodImportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodImport(this);
}

std::any css3Parser::GoodImportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitGoodImport(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::ImportsContext* css3Parser::imports() {
  ImportsContext *_localctx = _tracker.createInstance<ImportsContext>(_ctx, getState());
  enterRule(_localctx, 4, css3Parser::RuleImports);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(269);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::GoodImportContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(231);
      match(css3Parser::Import);
      setState(232);
      ws();
      setState(235);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(233);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(234);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(237);
      ws();
      setState(238);
      mediaQueryList();
      setState(239);
      match(css3Parser::SemiColon);
      setState(240);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::GoodImportContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(242);
      match(css3Parser::Import);
      setState(243);
      ws();
      setState(246);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(244);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(245);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(248);
      ws();
      setState(249);
      match(css3Parser::SemiColon);
      setState(250);
      ws();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<css3Parser::BadImportContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(252);
      match(css3Parser::Import);
      setState(253);
      ws();
      setState(256);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(254);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(255);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(258);
      ws();
      setState(259);
      mediaQueryList();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<css3Parser::BadImportContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(261);
      match(css3Parser::Import);
      setState(262);
      ws();
      setState(265);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(263);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(264);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(267);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_Context ------------------------------------------------------------------

css3Parser::Namespace_Context::Namespace_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::Namespace_Context::getRuleIndex() const {
  return css3Parser::RuleNamespace_;
}

void css3Parser::Namespace_Context::copyFrom(Namespace_Context *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GoodNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodNamespaceContext::Namespace() {
  return getToken(css3Parser::Namespace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GoodNamespaceContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GoodNamespaceContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::GoodNamespaceContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

tree::TerminalNode* css3Parser::GoodNamespaceContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::GoodNamespaceContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::NamespacePrefixContext* css3Parser::GoodNamespaceContext::namespacePrefix() {
  return getRuleContext<css3Parser::NamespacePrefixContext>(0);
}

css3Parser::GoodNamespaceContext::GoodNamespaceContext(Namespace_Context *ctx) { copyFrom(ctx); }

void css3Parser::GoodNamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodNamespace(this);
}
void css3Parser::GoodNamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodNamespace(this);
}

std::any css3Parser::GoodNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitGoodNamespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BadNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadNamespaceContext::Namespace() {
  return getToken(css3Parser::Namespace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BadNamespaceContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BadNamespaceContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::BadNamespaceContext::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::BadNamespaceContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::NamespacePrefixContext* css3Parser::BadNamespaceContext::namespacePrefix() {
  return getRuleContext<css3Parser::NamespacePrefixContext>(0);
}

css3Parser::BadNamespaceContext::BadNamespaceContext(Namespace_Context *ctx) { copyFrom(ctx); }

void css3Parser::BadNamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadNamespace(this);
}
void css3Parser::BadNamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadNamespace(this);
}

std::any css3Parser::BadNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitBadNamespace(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::Namespace_Context* css3Parser::namespace_() {
  Namespace_Context *_localctx = _tracker.createInstance<Namespace_Context>(_ctx, getState());
  enterRule(_localctx, 6, css3Parser::RuleNamespace_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(299);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::GoodNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(271);
      match(css3Parser::Namespace);
      setState(272);
      ws();
      setState(276);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & 4298375175) != 0)) {
        setState(273);
        namespacePrefix();
        setState(274);
        ws();
      }
      setState(280);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(278);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(279);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(282);
      ws();
      setState(283);
      match(css3Parser::SemiColon);
      setState(284);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::BadNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(286);
      match(css3Parser::Namespace);
      setState(287);
      ws();
      setState(291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & 4298375175) != 0)) {
        setState(288);
        namespacePrefix();
        setState(289);
        ws();
      }
      setState(295);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::String_: {
          setState(293);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::Url:
        case css3Parser::Url_: {
          setState(294);
          url();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(297);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespacePrefixContext ------------------------------------------------------------------

css3Parser::NamespacePrefixContext::NamespacePrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::NamespacePrefixContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::NamespacePrefixContext::getRuleIndex() const {
  return css3Parser::RuleNamespacePrefix;
}

void css3Parser::NamespacePrefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespacePrefix(this);
}

void css3Parser::NamespacePrefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespacePrefix(this);
}


std::any css3Parser::NamespacePrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitNamespacePrefix(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::NamespacePrefixContext* css3Parser::namespacePrefix() {
  NamespacePrefixContext *_localctx = _tracker.createInstance<NamespacePrefixContext>(_ctx, getState());
  enterRule(_localctx, 8, css3Parser::RuleNamespacePrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(301);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaContext ------------------------------------------------------------------

css3Parser::MediaContext::MediaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::MediaContext::Media() {
  return getToken(css3Parser::Media, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::MediaContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaQueryListContext* css3Parser::MediaContext::mediaQueryList() {
  return getRuleContext<css3Parser::MediaQueryListContext>(0);
}

css3Parser::GroupRuleBodyContext* css3Parser::MediaContext::groupRuleBody() {
  return getRuleContext<css3Parser::GroupRuleBodyContext>(0);
}


size_t css3Parser::MediaContext::getRuleIndex() const {
  return css3Parser::RuleMedia;
}

void css3Parser::MediaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMedia(this);
}

void css3Parser::MediaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMedia(this);
}


std::any css3Parser::MediaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitMedia(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::MediaContext* css3Parser::media() {
  MediaContext *_localctx = _tracker.createInstance<MediaContext>(_ctx, getState());
  enterRule(_localctx, 10, css3Parser::RuleMedia);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(303);
    match(css3Parser::Media);
    setState(304);
    ws();
    setState(305);
    mediaQueryList();
    setState(306);
    groupRuleBody();
    setState(307);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaQueryListContext ------------------------------------------------------------------

css3Parser::MediaQueryListContext::MediaQueryListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::MediaQueryListContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaQueryListContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<css3Parser::MediaQueryContext *> css3Parser::MediaQueryListContext::mediaQuery() {
  return getRuleContexts<css3Parser::MediaQueryContext>();
}

css3Parser::MediaQueryContext* css3Parser::MediaQueryListContext::mediaQuery(size_t i) {
  return getRuleContext<css3Parser::MediaQueryContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::MediaQueryListContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::MediaQueryListContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}


size_t css3Parser::MediaQueryListContext::getRuleIndex() const {
  return css3Parser::RuleMediaQueryList;
}

void css3Parser::MediaQueryListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaQueryList(this);
}

void css3Parser::MediaQueryListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaQueryList(this);
}


std::any css3Parser::MediaQueryListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitMediaQueryList(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::MediaQueryListContext* css3Parser::mediaQueryList() {
  MediaQueryListContext *_localctx = _tracker.createInstance<MediaQueryListContext>(_ctx, getState());
  enterRule(_localctx, 12, css3Parser::RuleMediaQueryList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(319);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      setState(309);
      mediaQuery();
      setState(316);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == css3Parser::Comma) {
        setState(310);
        match(css3Parser::Comma);
        setState(311);
        ws();
        setState(312);
        mediaQuery();
        setState(318);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(321);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaQueryContext ------------------------------------------------------------------

css3Parser::MediaQueryContext::MediaQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::MediaQueryContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaQueryContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaTypeContext* css3Parser::MediaQueryContext::mediaType() {
  return getRuleContext<css3Parser::MediaTypeContext>(0);
}

std::vector<tree::TerminalNode *> css3Parser::MediaQueryContext::And() {
  return getTokens(css3Parser::And);
}

tree::TerminalNode* css3Parser::MediaQueryContext::And(size_t i) {
  return getToken(css3Parser::And, i);
}

std::vector<css3Parser::MediaExpressionContext *> css3Parser::MediaQueryContext::mediaExpression() {
  return getRuleContexts<css3Parser::MediaExpressionContext>();
}

css3Parser::MediaExpressionContext* css3Parser::MediaQueryContext::mediaExpression(size_t i) {
  return getRuleContext<css3Parser::MediaExpressionContext>(i);
}

tree::TerminalNode* css3Parser::MediaQueryContext::MediaOnly() {
  return getToken(css3Parser::MediaOnly, 0);
}

tree::TerminalNode* css3Parser::MediaQueryContext::Not() {
  return getToken(css3Parser::Not, 0);
}


size_t css3Parser::MediaQueryContext::getRuleIndex() const {
  return css3Parser::RuleMediaQuery;
}

void css3Parser::MediaQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaQuery(this);
}

void css3Parser::MediaQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaQuery(this);
}


std::any css3Parser::MediaQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitMediaQuery(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::MediaQueryContext* css3Parser::mediaQuery() {
  MediaQueryContext *_localctx = _tracker.createInstance<MediaQueryContext>(_ctx, getState());
  enterRule(_localctx, 14, css3Parser::RuleMediaQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(348);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Comment:
      case css3Parser::Space:
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        enterOuterAlt(_localctx, 1);
        setState(324);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
        case 1: {
          setState(323);
          _la = _input->LA(1);
          if (!(_la == css3Parser::MediaOnly

          || _la == css3Parser::Not)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        setState(326);
        ws();
        setState(327);
        mediaType();
        setState(328);
        ws();
        setState(335);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(329);
            match(css3Parser::And);
            setState(330);
            ws();
            setState(331);
            mediaExpression(); 
          }
          setState(337);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
        }
        break;
      }

      case css3Parser::OpenParen: {
        enterOuterAlt(_localctx, 2);
        setState(338);
        mediaExpression();
        setState(345);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(339);
            match(css3Parser::And);
            setState(340);
            ws();
            setState(341);
            mediaExpression(); 
          }
          setState(347);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaTypeContext ------------------------------------------------------------------

css3Parser::MediaTypeContext::MediaTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::MediaTypeContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::MediaTypeContext::getRuleIndex() const {
  return css3Parser::RuleMediaType;
}

void css3Parser::MediaTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaType(this);
}

void css3Parser::MediaTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaType(this);
}


std::any css3Parser::MediaTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitMediaType(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::MediaTypeContext* css3Parser::mediaType() {
  MediaTypeContext *_localctx = _tracker.createInstance<MediaTypeContext>(_ctx, getState());
  enterRule(_localctx, 16, css3Parser::RuleMediaType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(350);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaExpressionContext ------------------------------------------------------------------

css3Parser::MediaExpressionContext::MediaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::MediaExpressionContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::MediaExpressionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::MediaExpressionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::MediaFeatureContext* css3Parser::MediaExpressionContext::mediaFeature() {
  return getRuleContext<css3Parser::MediaFeatureContext>(0);
}

tree::TerminalNode* css3Parser::MediaExpressionContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

tree::TerminalNode* css3Parser::MediaExpressionContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::ExprContext* css3Parser::MediaExpressionContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}


size_t css3Parser::MediaExpressionContext::getRuleIndex() const {
  return css3Parser::RuleMediaExpression;
}

void css3Parser::MediaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaExpression(this);
}

void css3Parser::MediaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaExpression(this);
}


std::any css3Parser::MediaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitMediaExpression(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::MediaExpressionContext* css3Parser::mediaExpression() {
  MediaExpressionContext *_localctx = _tracker.createInstance<MediaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 18, css3Parser::RuleMediaExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(css3Parser::OpenParen);
    setState(353);
    ws();
    setState(354);
    mediaFeature();
    setState(359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Colon) {
      setState(355);
      match(css3Parser::Colon);
      setState(356);
      ws();
      setState(357);
      expr();
    }
    setState(361);
    match(css3Parser::CloseParen);
    setState(362);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MediaFeatureContext ------------------------------------------------------------------

css3Parser::MediaFeatureContext::MediaFeatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::MediaFeatureContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::WsContext* css3Parser::MediaFeatureContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::MediaFeatureContext::getRuleIndex() const {
  return css3Parser::RuleMediaFeature;
}

void css3Parser::MediaFeatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMediaFeature(this);
}

void css3Parser::MediaFeatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMediaFeature(this);
}


std::any css3Parser::MediaFeatureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitMediaFeature(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::MediaFeatureContext* css3Parser::mediaFeature() {
  MediaFeatureContext *_localctx = _tracker.createInstance<MediaFeatureContext>(_ctx, getState());
  enterRule(_localctx, 20, css3Parser::RuleMediaFeature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(364);
    ident();
    setState(365);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PageContext ------------------------------------------------------------------

css3Parser::PageContext::PageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PageContext::Page() {
  return getToken(css3Parser::Page, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::PageContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::PageContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::PageContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::PageContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::PseudoPageContext* css3Parser::PageContext::pseudoPage() {
  return getRuleContext<css3Parser::PseudoPageContext>(0);
}

std::vector<css3Parser::DeclarationContext *> css3Parser::PageContext::declaration() {
  return getRuleContexts<css3Parser::DeclarationContext>();
}

css3Parser::DeclarationContext* css3Parser::PageContext::declaration(size_t i) {
  return getRuleContext<css3Parser::DeclarationContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::PageContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::PageContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::PageContext::getRuleIndex() const {
  return css3Parser::RulePage;
}

void css3Parser::PageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPage(this);
}

void css3Parser::PageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPage(this);
}


std::any css3Parser::PageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitPage(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::PageContext* css3Parser::page() {
  PageContext *_localctx = _tracker.createInstance<PageContext>(_ctx, getState());
  enterRule(_localctx, 22, css3Parser::RulePage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(367);
    match(css3Parser::Page);
    setState(368);
    ws();
    setState(370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Colon) {
      setState(369);
      pseudoPage();
    }
    setState(372);
    match(css3Parser::OpenBrace);
    setState(373);
    ws();
    setState(375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 11) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 11)) & 11266145908686857) != 0)) {
      setState(374);
      declaration();
    }
    setState(384);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::SemiColon) {
      setState(377);
      match(css3Parser::SemiColon);
      setState(378);
      ws();
      setState(380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 11) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 11)) & 11266145908686857) != 0)) {
        setState(379);
        declaration();
      }
      setState(386);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(387);
    match(css3Parser::CloseBrace);
    setState(388);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PseudoPageContext ------------------------------------------------------------------

css3Parser::PseudoPageContext::PseudoPageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PseudoPageContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::IdentContext* css3Parser::PseudoPageContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::WsContext* css3Parser::PseudoPageContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::PseudoPageContext::getRuleIndex() const {
  return css3Parser::RulePseudoPage;
}

void css3Parser::PseudoPageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPseudoPage(this);
}

void css3Parser::PseudoPageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPseudoPage(this);
}


std::any css3Parser::PseudoPageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitPseudoPage(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::PseudoPageContext* css3Parser::pseudoPage() {
  PseudoPageContext *_localctx = _tracker.createInstance<PseudoPageContext>(_ctx, getState());
  enterRule(_localctx, 24, css3Parser::RulePseudoPage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(390);
    match(css3Parser::Colon);
    setState(391);
    ident();
    setState(392);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorGroupContext ------------------------------------------------------------------

css3Parser::SelectorGroupContext::SelectorGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SelectorContext *> css3Parser::SelectorGroupContext::selector() {
  return getRuleContexts<css3Parser::SelectorContext>();
}

css3Parser::SelectorContext* css3Parser::SelectorGroupContext::selector(size_t i) {
  return getRuleContext<css3Parser::SelectorContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::SelectorGroupContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::SelectorGroupContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}

std::vector<css3Parser::WsContext *> css3Parser::SelectorGroupContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SelectorGroupContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}


size_t css3Parser::SelectorGroupContext::getRuleIndex() const {
  return css3Parser::RuleSelectorGroup;
}

void css3Parser::SelectorGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorGroup(this);
}

void css3Parser::SelectorGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorGroup(this);
}


std::any css3Parser::SelectorGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSelectorGroup(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SelectorGroupContext* css3Parser::selectorGroup() {
  SelectorGroupContext *_localctx = _tracker.createInstance<SelectorGroupContext>(_ctx, getState());
  enterRule(_localctx, 26, css3Parser::RuleSelectorGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(394);
    selector();
    setState(401);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Comma) {
      setState(395);
      match(css3Parser::Comma);
      setState(396);
      ws();
      setState(397);
      selector();
      setState(403);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorContext ------------------------------------------------------------------

css3Parser::SelectorContext::SelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SimpleSelectorSequenceContext *> css3Parser::SelectorContext::simpleSelectorSequence() {
  return getRuleContexts<css3Parser::SimpleSelectorSequenceContext>();
}

css3Parser::SimpleSelectorSequenceContext* css3Parser::SelectorContext::simpleSelectorSequence(size_t i) {
  return getRuleContext<css3Parser::SimpleSelectorSequenceContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::SelectorContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SelectorContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<css3Parser::CombinatorContext *> css3Parser::SelectorContext::combinator() {
  return getRuleContexts<css3Parser::CombinatorContext>();
}

css3Parser::CombinatorContext* css3Parser::SelectorContext::combinator(size_t i) {
  return getRuleContext<css3Parser::CombinatorContext>(i);
}


size_t css3Parser::SelectorContext::getRuleIndex() const {
  return css3Parser::RuleSelector;
}

void css3Parser::SelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelector(this);
}

void css3Parser::SelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelector(this);
}


std::any css3Parser::SelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSelector(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SelectorContext* css3Parser::selector() {
  SelectorContext *_localctx = _tracker.createInstance<SelectorContext>(_ctx, getState());
  enterRule(_localctx, 28, css3Parser::RuleSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(404);
    simpleSelectorSequence();
    setState(405);
    ws();
    setState(412);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2886218153984) != 0)) {
      setState(406);
      combinator();
      setState(407);
      simpleSelectorSequence();
      setState(408);
      ws();
      setState(414);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CombinatorContext ------------------------------------------------------------------

css3Parser::CombinatorContext::CombinatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::CombinatorContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

css3Parser::WsContext* css3Parser::CombinatorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::CombinatorContext::Greater() {
  return getToken(css3Parser::Greater, 0);
}

tree::TerminalNode* css3Parser::CombinatorContext::Tilde() {
  return getToken(css3Parser::Tilde, 0);
}

tree::TerminalNode* css3Parser::CombinatorContext::Space() {
  return getToken(css3Parser::Space, 0);
}


size_t css3Parser::CombinatorContext::getRuleIndex() const {
  return css3Parser::RuleCombinator;
}

void css3Parser::CombinatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCombinator(this);
}

void css3Parser::CombinatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCombinator(this);
}


std::any css3Parser::CombinatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitCombinator(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::CombinatorContext* css3Parser::combinator() {
  CombinatorContext *_localctx = _tracker.createInstance<CombinatorContext>(_ctx, getState());
  enterRule(_localctx, 30, css3Parser::RuleCombinator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(423);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Plus: {
        enterOuterAlt(_localctx, 1);
        setState(415);
        match(css3Parser::Plus);
        setState(416);
        ws();
        break;
      }

      case css3Parser::Greater: {
        enterOuterAlt(_localctx, 2);
        setState(417);
        match(css3Parser::Greater);
        setState(418);
        ws();
        break;
      }

      case css3Parser::Tilde: {
        enterOuterAlt(_localctx, 3);
        setState(419);
        match(css3Parser::Tilde);
        setState(420);
        ws();
        break;
      }

      case css3Parser::Space: {
        enterOuterAlt(_localctx, 4);
        setState(421);
        match(css3Parser::Space);
        setState(422);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleSelectorSequenceContext ------------------------------------------------------------------

css3Parser::SimpleSelectorSequenceContext::SimpleSelectorSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::TypeSelectorContext* css3Parser::SimpleSelectorSequenceContext::typeSelector() {
  return getRuleContext<css3Parser::TypeSelectorContext>(0);
}

css3Parser::UniversalContext* css3Parser::SimpleSelectorSequenceContext::universal() {
  return getRuleContext<css3Parser::UniversalContext>(0);
}

std::vector<tree::TerminalNode *> css3Parser::SimpleSelectorSequenceContext::Hash() {
  return getTokens(css3Parser::Hash);
}

tree::TerminalNode* css3Parser::SimpleSelectorSequenceContext::Hash(size_t i) {
  return getToken(css3Parser::Hash, i);
}

std::vector<css3Parser::ClassNameContext *> css3Parser::SimpleSelectorSequenceContext::className() {
  return getRuleContexts<css3Parser::ClassNameContext>();
}

css3Parser::ClassNameContext* css3Parser::SimpleSelectorSequenceContext::className(size_t i) {
  return getRuleContext<css3Parser::ClassNameContext>(i);
}

std::vector<css3Parser::AttribContext *> css3Parser::SimpleSelectorSequenceContext::attrib() {
  return getRuleContexts<css3Parser::AttribContext>();
}

css3Parser::AttribContext* css3Parser::SimpleSelectorSequenceContext::attrib(size_t i) {
  return getRuleContext<css3Parser::AttribContext>(i);
}

std::vector<css3Parser::PseudoContext *> css3Parser::SimpleSelectorSequenceContext::pseudo() {
  return getRuleContexts<css3Parser::PseudoContext>();
}

css3Parser::PseudoContext* css3Parser::SimpleSelectorSequenceContext::pseudo(size_t i) {
  return getRuleContext<css3Parser::PseudoContext>(i);
}

std::vector<css3Parser::NegationContext *> css3Parser::SimpleSelectorSequenceContext::negation() {
  return getRuleContexts<css3Parser::NegationContext>();
}

css3Parser::NegationContext* css3Parser::SimpleSelectorSequenceContext::negation(size_t i) {
  return getRuleContext<css3Parser::NegationContext>(i);
}


size_t css3Parser::SimpleSelectorSequenceContext::getRuleIndex() const {
  return css3Parser::RuleSimpleSelectorSequence;
}

void css3Parser::SimpleSelectorSequenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleSelectorSequence(this);
}

void css3Parser::SimpleSelectorSequenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleSelectorSequence(this);
}


std::any css3Parser::SimpleSelectorSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSimpleSelectorSequence(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SimpleSelectorSequenceContext* css3Parser::simpleSelectorSequence() {
  SimpleSelectorSequenceContext *_localctx = _tracker.createInstance<SimpleSelectorSequenceContext>(_ctx, getState());
  enterRule(_localctx, 32, css3Parser::RuleSimpleSelectorSequence);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(448);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Multiply:
      case css3Parser::Pipe:
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        enterOuterAlt(_localctx, 1);
        setState(427);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
        case 1: {
          setState(425);
          typeSelector();
          break;
        }

        case 2: {
          setState(426);
          universal();
          break;
        }

        default:
          break;
        }
        setState(436);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4398050706946) != 0)) {
          setState(434);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case css3Parser::Hash: {
              setState(429);
              match(css3Parser::Hash);
              break;
            }

            case css3Parser::Dot: {
              setState(430);
              className();
              break;
            }

            case css3Parser::OpenBracket: {
              setState(431);
              attrib();
              break;
            }

            case css3Parser::Colon: {
              setState(432);
              pseudo();
              break;
            }

            case css3Parser::PseudoNot: {
              setState(433);
              negation();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(438);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case css3Parser::OpenBracket:
      case css3Parser::Colon:
      case css3Parser::Dot:
      case css3Parser::Hash:
      case css3Parser::PseudoNot: {
        enterOuterAlt(_localctx, 2);
        setState(444); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(444);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case css3Parser::Hash: {
              setState(439);
              match(css3Parser::Hash);
              break;
            }

            case css3Parser::Dot: {
              setState(440);
              className();
              break;
            }

            case css3Parser::OpenBracket: {
              setState(441);
              attrib();
              break;
            }

            case css3Parser::Colon: {
              setState(442);
              pseudo();
              break;
            }

            case css3Parser::PseudoNot: {
              setState(443);
              negation();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(446); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4398050706946) != 0));
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSelectorContext ------------------------------------------------------------------

css3Parser::TypeSelectorContext::TypeSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::ElementNameContext* css3Parser::TypeSelectorContext::elementName() {
  return getRuleContext<css3Parser::ElementNameContext>(0);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::TypeSelectorContext::typeNamespacePrefix() {
  return getRuleContext<css3Parser::TypeNamespacePrefixContext>(0);
}


size_t css3Parser::TypeSelectorContext::getRuleIndex() const {
  return css3Parser::RuleTypeSelector;
}

void css3Parser::TypeSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSelector(this);
}

void css3Parser::TypeSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSelector(this);
}


std::any css3Parser::TypeSelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitTypeSelector(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::TypeSelectorContext* css3Parser::typeSelector() {
  TypeSelectorContext *_localctx = _tracker.createInstance<TypeSelectorContext>(_ctx, getState());
  enterRule(_localctx, 34, css3Parser::RuleTypeSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(451);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(450);
      typeNamespacePrefix();
      break;
    }

    default:
      break;
    }
    setState(453);
    elementName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNamespacePrefixContext ------------------------------------------------------------------

css3Parser::TypeNamespacePrefixContext::TypeNamespacePrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::TypeNamespacePrefixContext::Pipe() {
  return getToken(css3Parser::Pipe, 0);
}

css3Parser::IdentContext* css3Parser::TypeNamespacePrefixContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::TypeNamespacePrefixContext::Multiply() {
  return getToken(css3Parser::Multiply, 0);
}


size_t css3Parser::TypeNamespacePrefixContext::getRuleIndex() const {
  return css3Parser::RuleTypeNamespacePrefix;
}

void css3Parser::TypeNamespacePrefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNamespacePrefix(this);
}

void css3Parser::TypeNamespacePrefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNamespacePrefix(this);
}


std::any css3Parser::TypeNamespacePrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitTypeNamespacePrefix(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::typeNamespacePrefix() {
  TypeNamespacePrefixContext *_localctx = _tracker.createInstance<TypeNamespacePrefixContext>(_ctx, getState());
  enterRule(_localctx, 36, css3Parser::RuleTypeNamespacePrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(457);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        setState(455);
        ident();
        break;
      }

      case css3Parser::Multiply: {
        setState(456);
        match(css3Parser::Multiply);
        break;
      }

      case css3Parser::Pipe: {
        break;
      }

    default:
      break;
    }
    setState(459);
    match(css3Parser::Pipe);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementNameContext ------------------------------------------------------------------

css3Parser::ElementNameContext::ElementNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::ElementNameContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::ElementNameContext::getRuleIndex() const {
  return css3Parser::RuleElementName;
}

void css3Parser::ElementNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementName(this);
}

void css3Parser::ElementNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementName(this);
}


std::any css3Parser::ElementNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitElementName(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::ElementNameContext* css3Parser::elementName() {
  ElementNameContext *_localctx = _tracker.createInstance<ElementNameContext>(_ctx, getState());
  enterRule(_localctx, 38, css3Parser::RuleElementName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(461);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UniversalContext ------------------------------------------------------------------

css3Parser::UniversalContext::UniversalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::UniversalContext::Multiply() {
  return getToken(css3Parser::Multiply, 0);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::UniversalContext::typeNamespacePrefix() {
  return getRuleContext<css3Parser::TypeNamespacePrefixContext>(0);
}


size_t css3Parser::UniversalContext::getRuleIndex() const {
  return css3Parser::RuleUniversal;
}

void css3Parser::UniversalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUniversal(this);
}

void css3Parser::UniversalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUniversal(this);
}


std::any css3Parser::UniversalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUniversal(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::UniversalContext* css3Parser::universal() {
  UniversalContext *_localctx = _tracker.createInstance<UniversalContext>(_ctx, getState());
  enterRule(_localctx, 40, css3Parser::RuleUniversal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(464);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(463);
      typeNamespacePrefix();
      break;
    }

    default:
      break;
    }
    setState(466);
    match(css3Parser::Multiply);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassNameContext ------------------------------------------------------------------

css3Parser::ClassNameContext::ClassNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::ClassNameContext::Dot() {
  return getToken(css3Parser::Dot, 0);
}

css3Parser::IdentContext* css3Parser::ClassNameContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}


size_t css3Parser::ClassNameContext::getRuleIndex() const {
  return css3Parser::RuleClassName;
}

void css3Parser::ClassNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassName(this);
}

void css3Parser::ClassNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassName(this);
}


std::any css3Parser::ClassNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitClassName(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::ClassNameContext* css3Parser::className() {
  ClassNameContext *_localctx = _tracker.createInstance<ClassNameContext>(_ctx, getState());
  enterRule(_localctx, 42, css3Parser::RuleClassName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(468);
    match(css3Parser::Dot);
    setState(469);
    ident();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttribContext ------------------------------------------------------------------

css3Parser::AttribContext::AttribContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::AttribContext::OpenBracket() {
  return getToken(css3Parser::OpenBracket, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::AttribContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::AttribContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<css3Parser::IdentContext *> css3Parser::AttribContext::ident() {
  return getRuleContexts<css3Parser::IdentContext>();
}

css3Parser::IdentContext* css3Parser::AttribContext::ident(size_t i) {
  return getRuleContext<css3Parser::IdentContext>(i);
}

tree::TerminalNode* css3Parser::AttribContext::CloseBracket() {
  return getToken(css3Parser::CloseBracket, 0);
}

css3Parser::TypeNamespacePrefixContext* css3Parser::AttribContext::typeNamespacePrefix() {
  return getRuleContext<css3Parser::TypeNamespacePrefixContext>(0);
}

tree::TerminalNode* css3Parser::AttribContext::PrefixMatch() {
  return getToken(css3Parser::PrefixMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::SuffixMatch() {
  return getToken(css3Parser::SuffixMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::SubstringMatch() {
  return getToken(css3Parser::SubstringMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::Equal() {
  return getToken(css3Parser::Equal, 0);
}

tree::TerminalNode* css3Parser::AttribContext::Includes() {
  return getToken(css3Parser::Includes, 0);
}

tree::TerminalNode* css3Parser::AttribContext::DashMatch() {
  return getToken(css3Parser::DashMatch, 0);
}

tree::TerminalNode* css3Parser::AttribContext::String_() {
  return getToken(css3Parser::String_, 0);
}


size_t css3Parser::AttribContext::getRuleIndex() const {
  return css3Parser::RuleAttrib;
}

void css3Parser::AttribContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttrib(this);
}

void css3Parser::AttribContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttrib(this);
}


std::any css3Parser::AttribContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitAttrib(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::AttribContext* css3Parser::attrib() {
  AttribContext *_localctx = _tracker.createInstance<AttribContext>(_ctx, getState());
  enterRule(_localctx, 44, css3Parser::RuleAttrib);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(471);
    match(css3Parser::OpenBracket);
    setState(472);
    ws();
    setState(474);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(473);
      typeNamespacePrefix();
      break;
    }

    default:
      break;
    }
    setState(476);
    ident();
    setState(477);
    ws();
    setState(486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 246290607767808) != 0)) {
      setState(478);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 246290607767808) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(479);
      ws();
      setState(482);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::MediaOnly:
        case css3Parser::Not:
        case css3Parser::And:
        case css3Parser::Or:
        case css3Parser::From:
        case css3Parser::To:
        case css3Parser::Ident: {
          setState(480);
          ident();
          break;
        }

        case css3Parser::String_: {
          setState(481);
          match(css3Parser::String_);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(484);
      ws();
    }
    setState(488);
    match(css3Parser::CloseBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PseudoContext ------------------------------------------------------------------

css3Parser::PseudoContext::PseudoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> css3Parser::PseudoContext::Colon() {
  return getTokens(css3Parser::Colon);
}

tree::TerminalNode* css3Parser::PseudoContext::Colon(size_t i) {
  return getToken(css3Parser::Colon, i);
}

css3Parser::IdentContext* css3Parser::PseudoContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::FunctionalPseudoContext* css3Parser::PseudoContext::functionalPseudo() {
  return getRuleContext<css3Parser::FunctionalPseudoContext>(0);
}


size_t css3Parser::PseudoContext::getRuleIndex() const {
  return css3Parser::RulePseudo;
}

void css3Parser::PseudoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPseudo(this);
}

void css3Parser::PseudoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPseudo(this);
}


std::any css3Parser::PseudoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitPseudo(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::PseudoContext* css3Parser::pseudo() {
  PseudoContext *_localctx = _tracker.createInstance<PseudoContext>(_ctx, getState());
  enterRule(_localctx, 46, css3Parser::RulePseudo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    match(css3Parser::Colon);
    setState(492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Colon) {
      setState(491);
      match(css3Parser::Colon);
    }
    setState(496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        setState(494);
        ident();
        break;
      }

      case css3Parser::Function_: {
        setState(495);
        functionalPseudo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionalPseudoContext ------------------------------------------------------------------

css3Parser::FunctionalPseudoContext::FunctionalPseudoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FunctionalPseudoContext::Function_() {
  return getToken(css3Parser::Function_, 0);
}

css3Parser::WsContext* css3Parser::FunctionalPseudoContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ExpressionContext* css3Parser::FunctionalPseudoContext::expression() {
  return getRuleContext<css3Parser::ExpressionContext>(0);
}

tree::TerminalNode* css3Parser::FunctionalPseudoContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::FunctionalPseudoContext::getRuleIndex() const {
  return css3Parser::RuleFunctionalPseudo;
}

void css3Parser::FunctionalPseudoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionalPseudo(this);
}

void css3Parser::FunctionalPseudoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionalPseudo(this);
}


std::any css3Parser::FunctionalPseudoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFunctionalPseudo(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FunctionalPseudoContext* css3Parser::functionalPseudo() {
  FunctionalPseudoContext *_localctx = _tracker.createInstance<FunctionalPseudoContext>(_ctx, getState());
  enterRule(_localctx, 48, css3Parser::RuleFunctionalPseudo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(498);
    match(css3Parser::Function_);
    setState(499);
    ws();
    setState(500);
    expression();
    setState(501);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

css3Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::ExpressionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::ExpressionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Plus() {
  return getTokens(css3Parser::Plus);
}

tree::TerminalNode* css3Parser::ExpressionContext::Plus(size_t i) {
  return getToken(css3Parser::Plus, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Minus() {
  return getTokens(css3Parser::Minus);
}

tree::TerminalNode* css3Parser::ExpressionContext::Minus(size_t i) {
  return getToken(css3Parser::Minus, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Dimension() {
  return getTokens(css3Parser::Dimension);
}

tree::TerminalNode* css3Parser::ExpressionContext::Dimension(size_t i) {
  return getToken(css3Parser::Dimension, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::UnknownDimension() {
  return getTokens(css3Parser::UnknownDimension);
}

tree::TerminalNode* css3Parser::ExpressionContext::UnknownDimension(size_t i) {
  return getToken(css3Parser::UnknownDimension, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::Number() {
  return getTokens(css3Parser::Number);
}

tree::TerminalNode* css3Parser::ExpressionContext::Number(size_t i) {
  return getToken(css3Parser::Number, i);
}

std::vector<tree::TerminalNode *> css3Parser::ExpressionContext::String_() {
  return getTokens(css3Parser::String_);
}

tree::TerminalNode* css3Parser::ExpressionContext::String_(size_t i) {
  return getToken(css3Parser::String_, i);
}

std::vector<css3Parser::IdentContext *> css3Parser::ExpressionContext::ident() {
  return getRuleContexts<css3Parser::IdentContext>();
}

css3Parser::IdentContext* css3Parser::ExpressionContext::ident(size_t i) {
  return getRuleContext<css3Parser::IdentContext>(i);
}


size_t css3Parser::ExpressionContext::getRuleIndex() const {
  return css3Parser::RuleExpression;
}

void css3Parser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void css3Parser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


std::any css3Parser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::ExpressionContext* css3Parser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 50, css3Parser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(513); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(510);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::Plus: {
          setState(503);
          match(css3Parser::Plus);
          break;
        }

        case css3Parser::Minus: {
          setState(504);
          match(css3Parser::Minus);
          break;
        }

        case css3Parser::Dimension: {
          setState(505);
          match(css3Parser::Dimension);
          break;
        }

        case css3Parser::UnknownDimension: {
          setState(506);
          match(css3Parser::UnknownDimension);
          break;
        }

        case css3Parser::Number: {
          setState(507);
          match(css3Parser::Number);
          break;
        }

        case css3Parser::String_: {
          setState(508);
          match(css3Parser::String_);
          break;
        }

        case css3Parser::MediaOnly:
        case css3Parser::Not:
        case css3Parser::And:
        case css3Parser::Or:
        case css3Parser::From:
        case css3Parser::To:
        case css3Parser::Ident: {
          setState(509);
          ident();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(512);
      ws();
      setState(515); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & 4298381439) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NegationContext ------------------------------------------------------------------

css3Parser::NegationContext::NegationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::NegationContext::PseudoNot() {
  return getToken(css3Parser::PseudoNot, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::NegationContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::NegationContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::NegationArgContext* css3Parser::NegationContext::negationArg() {
  return getRuleContext<css3Parser::NegationArgContext>(0);
}

tree::TerminalNode* css3Parser::NegationContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::NegationContext::getRuleIndex() const {
  return css3Parser::RuleNegation;
}

void css3Parser::NegationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegation(this);
}

void css3Parser::NegationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegation(this);
}


std::any css3Parser::NegationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitNegation(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::NegationContext* css3Parser::negation() {
  NegationContext *_localctx = _tracker.createInstance<NegationContext>(_ctx, getState());
  enterRule(_localctx, 52, css3Parser::RuleNegation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(css3Parser::PseudoNot);
    setState(518);
    ws();
    setState(519);
    negationArg();
    setState(520);
    ws();
    setState(521);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NegationArgContext ------------------------------------------------------------------

css3Parser::NegationArgContext::NegationArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::TypeSelectorContext* css3Parser::NegationArgContext::typeSelector() {
  return getRuleContext<css3Parser::TypeSelectorContext>(0);
}

css3Parser::UniversalContext* css3Parser::NegationArgContext::universal() {
  return getRuleContext<css3Parser::UniversalContext>(0);
}

tree::TerminalNode* css3Parser::NegationArgContext::Hash() {
  return getToken(css3Parser::Hash, 0);
}

css3Parser::ClassNameContext* css3Parser::NegationArgContext::className() {
  return getRuleContext<css3Parser::ClassNameContext>(0);
}

css3Parser::AttribContext* css3Parser::NegationArgContext::attrib() {
  return getRuleContext<css3Parser::AttribContext>(0);
}

css3Parser::PseudoContext* css3Parser::NegationArgContext::pseudo() {
  return getRuleContext<css3Parser::PseudoContext>(0);
}


size_t css3Parser::NegationArgContext::getRuleIndex() const {
  return css3Parser::RuleNegationArg;
}

void css3Parser::NegationArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegationArg(this);
}

void css3Parser::NegationArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegationArg(this);
}


std::any css3Parser::NegationArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitNegationArg(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::NegationArgContext* css3Parser::negationArg() {
  NegationArgContext *_localctx = _tracker.createInstance<NegationArgContext>(_ctx, getState());
  enterRule(_localctx, 54, css3Parser::RuleNegationArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(529);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(523);
      typeSelector();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(524);
      universal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(525);
      match(css3Parser::Hash);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(526);
      className();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(527);
      attrib();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(528);
      pseudo();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Operator_Context ------------------------------------------------------------------

css3Parser::Operator_Context::Operator_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::Operator_Context::getRuleIndex() const {
  return css3Parser::RuleOperator_;
}

void css3Parser::Operator_Context::copyFrom(Operator_Context *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadOperatorContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadOperatorContext::Equal() {
  return getToken(css3Parser::Equal, 0);
}

css3Parser::WsContext* css3Parser::BadOperatorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::BadOperatorContext::BadOperatorContext(Operator_Context *ctx) { copyFrom(ctx); }

void css3Parser::BadOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadOperator(this);
}
void css3Parser::BadOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadOperator(this);
}

std::any css3Parser::BadOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitBadOperator(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GoodOperatorContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::GoodOperatorContext::Divide() {
  return getToken(css3Parser::Divide, 0);
}

css3Parser::WsContext* css3Parser::GoodOperatorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::GoodOperatorContext::Comma() {
  return getToken(css3Parser::Comma, 0);
}

tree::TerminalNode* css3Parser::GoodOperatorContext::Space() {
  return getToken(css3Parser::Space, 0);
}

css3Parser::GoodOperatorContext::GoodOperatorContext(Operator_Context *ctx) { copyFrom(ctx); }

void css3Parser::GoodOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodOperator(this);
}
void css3Parser::GoodOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodOperator(this);
}

std::any css3Parser::GoodOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitGoodOperator(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::Operator_Context* css3Parser::operator_() {
  Operator_Context *_localctx = _tracker.createInstance<Operator_Context>(_ctx, getState());
  enterRule(_localctx, 56, css3Parser::RuleOperator_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(539);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Divide: {
        _localctx = _tracker.createInstance<css3Parser::GoodOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(531);
        match(css3Parser::Divide);
        setState(532);
        ws();
        break;
      }

      case css3Parser::Comma: {
        _localctx = _tracker.createInstance<css3Parser::GoodOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(533);
        match(css3Parser::Comma);
        setState(534);
        ws();
        break;
      }

      case css3Parser::Space: {
        _localctx = _tracker.createInstance<css3Parser::GoodOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(535);
        match(css3Parser::Space);
        setState(536);
        ws();
        break;
      }

      case css3Parser::Equal: {
        _localctx = _tracker.createInstance<css3Parser::BadOperatorContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(537);
        match(css3Parser::Equal);
        setState(538);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_Context ------------------------------------------------------------------

css3Parser::Property_Context::Property_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::Property_Context::getRuleIndex() const {
  return css3Parser::RuleProperty_;
}

void css3Parser::Property_Context::copyFrom(Property_Context *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadPropertyContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::BadPropertyContext::Multiply() {
  return getToken(css3Parser::Multiply, 0);
}

css3Parser::IdentContext* css3Parser::BadPropertyContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::BadPropertyContext::Underscore() {
  return getToken(css3Parser::Underscore, 0);
}

css3Parser::BadPropertyContext::BadPropertyContext(Property_Context *ctx) { copyFrom(ctx); }

void css3Parser::BadPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadProperty(this);
}
void css3Parser::BadPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadProperty(this);
}

std::any css3Parser::BadPropertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitBadProperty(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GoodPropertyContext ------------------------------------------------------------------

css3Parser::IdentContext* css3Parser::GoodPropertyContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::WsContext* css3Parser::GoodPropertyContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::GoodPropertyContext::Variable() {
  return getToken(css3Parser::Variable, 0);
}

css3Parser::GoodPropertyContext::GoodPropertyContext(Property_Context *ctx) { copyFrom(ctx); }

void css3Parser::GoodPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoodProperty(this);
}
void css3Parser::GoodPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoodProperty(this);
}

std::any css3Parser::GoodPropertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitGoodProperty(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::Property_Context* css3Parser::property_() {
  Property_Context *_localctx = _tracker.createInstance<Property_Context>(_ctx, getState());
  enterRule(_localctx, 58, css3Parser::RuleProperty_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(550);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        _localctx = _tracker.createInstance<css3Parser::GoodPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(541);
        ident();
        setState(542);
        ws();
        break;
      }

      case css3Parser::Variable: {
        _localctx = _tracker.createInstance<css3Parser::GoodPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(544);
        match(css3Parser::Variable);
        setState(545);
        ws();
        break;
      }

      case css3Parser::Multiply: {
        _localctx = _tracker.createInstance<css3Parser::BadPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(546);
        match(css3Parser::Multiply);
        setState(547);
        ident();
        break;
      }

      case css3Parser::Underscore: {
        _localctx = _tracker.createInstance<css3Parser::BadPropertyContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(548);
        match(css3Parser::Underscore);
        setState(549);
        ident();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RulesetContext ------------------------------------------------------------------

css3Parser::RulesetContext::RulesetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::RulesetContext::getRuleIndex() const {
  return css3Parser::RuleRuleset;
}

void css3Parser::RulesetContext::copyFrom(RulesetContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnknownRulesetContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::UnknownRulesetContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::UnknownRulesetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::UnknownRulesetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::UnknownRulesetContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::UnknownRulesetContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::UnknownRulesetContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

css3Parser::DeclarationListContext* css3Parser::UnknownRulesetContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}

css3Parser::UnknownRulesetContext::UnknownRulesetContext(RulesetContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownRulesetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownRuleset(this);
}
void css3Parser::UnknownRulesetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownRuleset(this);
}

std::any css3Parser::UnknownRulesetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUnknownRuleset(this);
  else
    return visitor->visitChildren(this);
}
//----------------- KnownRulesetContext ------------------------------------------------------------------

css3Parser::SelectorGroupContext* css3Parser::KnownRulesetContext::selectorGroup() {
  return getRuleContext<css3Parser::SelectorGroupContext>(0);
}

tree::TerminalNode* css3Parser::KnownRulesetContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::KnownRulesetContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KnownRulesetContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::KnownRulesetContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::KnownRulesetContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}

css3Parser::KnownRulesetContext::KnownRulesetContext(RulesetContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownRulesetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownRuleset(this);
}
void css3Parser::KnownRulesetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownRuleset(this);
}

std::any css3Parser::KnownRulesetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitKnownRuleset(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::RulesetContext* css3Parser::ruleset() {
  RulesetContext *_localctx = _tracker.createInstance<RulesetContext>(_ctx, getState());
  enterRule(_localctx, 60, css3Parser::RuleRuleset);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(575);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownRulesetContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(552);
      selectorGroup();
      setState(553);
      match(css3Parser::OpenBrace);
      setState(554);
      ws();
      setState(556);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & 180258334538989713) != 0)) {
        setState(555);
        declarationList();
      }
      setState(558);
      match(css3Parser::CloseBrace);
      setState(559);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::UnknownRulesetContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(564);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 14663636294369802) != 0) || _la == css3Parser::Ident

      || _la == css3Parser::Function_) {
        setState(561);
        any_();
        setState(566);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(567);
      match(css3Parser::OpenBrace);
      setState(568);
      ws();
      setState(570);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & 180258334538989713) != 0)) {
        setState(569);
        declarationList();
      }
      setState(572);
      match(css3Parser::CloseBrace);
      setState(573);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationListContext ------------------------------------------------------------------

css3Parser::DeclarationListContext::DeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::DeclarationContext *> css3Parser::DeclarationListContext::declaration() {
  return getRuleContexts<css3Parser::DeclarationContext>();
}

css3Parser::DeclarationContext* css3Parser::DeclarationListContext::declaration(size_t i) {
  return getRuleContext<css3Parser::DeclarationContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::DeclarationListContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::DeclarationListContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::DeclarationListContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::DeclarationListContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::DeclarationListContext::getRuleIndex() const {
  return css3Parser::RuleDeclarationList;
}

void css3Parser::DeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationList(this);
}

void css3Parser::DeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationList(this);
}


std::any css3Parser::DeclarationListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitDeclarationList(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::DeclarationListContext* css3Parser::declarationList() {
  DeclarationListContext *_localctx = _tracker.createInstance<DeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 62, css3Parser::RuleDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(581);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::SemiColon) {
      setState(577);
      match(css3Parser::SemiColon);
      setState(578);
      ws();
      setState(583);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(584);
    declaration();
    setState(585);
    ws();
    setState(593);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(586);
        match(css3Parser::SemiColon);
        setState(587);
        ws();
        setState(589);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
        case 1: {
          setState(588);
          declaration();
          break;
        }

        default:
          break;
        } 
      }
      setState(595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

css3Parser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::DeclarationContext::getRuleIndex() const {
  return css3Parser::RuleDeclaration;
}

void css3Parser::DeclarationContext::copyFrom(DeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnknownDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::UnknownDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::UnknownDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::UnknownDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ValueContext* css3Parser::UnknownDeclarationContext::value() {
  return getRuleContext<css3Parser::ValueContext>(0);
}

css3Parser::UnknownDeclarationContext::UnknownDeclarationContext(DeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownDeclaration(this);
}
void css3Parser::UnknownDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownDeclaration(this);
}

std::any css3Parser::UnknownDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUnknownDeclaration(this);
  else
    return visitor->visitChildren(this);
}
//----------------- KnownDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::KnownDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::KnownDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::KnownDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ExprContext* css3Parser::KnownDeclarationContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

css3Parser::PrioContext* css3Parser::KnownDeclarationContext::prio() {
  return getRuleContext<css3Parser::PrioContext>(0);
}

css3Parser::KnownDeclarationContext::KnownDeclarationContext(DeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownDeclaration(this);
}
void css3Parser::KnownDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownDeclaration(this);
}

std::any css3Parser::KnownDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitKnownDeclaration(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::DeclarationContext* css3Parser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 64, css3Parser::RuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(608);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(596);
      property_();
      setState(597);
      match(css3Parser::Colon);
      setState(598);
      ws();
      setState(599);
      expr();
      setState(601);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == css3Parser::Important) {
        setState(600);
        prio();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::UnknownDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(603);
      property_();
      setState(604);
      match(css3Parser::Colon);
      setState(605);
      ws();
      setState(606);
      value();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrioContext ------------------------------------------------------------------

css3Parser::PrioContext::PrioContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PrioContext::Important() {
  return getToken(css3Parser::Important, 0);
}

css3Parser::WsContext* css3Parser::PrioContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::PrioContext::getRuleIndex() const {
  return css3Parser::RulePrio;
}

void css3Parser::PrioContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrio(this);
}

void css3Parser::PrioContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrio(this);
}


std::any css3Parser::PrioContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitPrio(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::PrioContext* css3Parser::prio() {
  PrioContext *_localctx = _tracker.createInstance<PrioContext>(_ctx, getState());
  enterRule(_localctx, 66, css3Parser::RulePrio);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(610);
    match(css3Parser::Important);
    setState(611);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

css3Parser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::Any_Context *> css3Parser::ValueContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::ValueContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::BlockContext *> css3Parser::ValueContext::block() {
  return getRuleContexts<css3Parser::BlockContext>();
}

css3Parser::BlockContext* css3Parser::ValueContext::block(size_t i) {
  return getRuleContext<css3Parser::BlockContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::ValueContext::AtKeyword() {
  return getTokens(css3Parser::AtKeyword);
}

tree::TerminalNode* css3Parser::ValueContext::AtKeyword(size_t i) {
  return getToken(css3Parser::AtKeyword, i);
}

std::vector<css3Parser::WsContext *> css3Parser::ValueContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::ValueContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}


size_t css3Parser::ValueContext::getRuleIndex() const {
  return css3Parser::RuleValue;
}

void css3Parser::ValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue(this);
}

void css3Parser::ValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue(this);
}


std::any css3Parser::ValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitValue(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::ValueContext* css3Parser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 68, css3Parser::RuleValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(617); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(617);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case css3Parser::OpenBracket:
                case css3Parser::OpenParen:
                case css3Parser::Colon:
                case css3Parser::Url:
                case css3Parser::Includes:
                case css3Parser::DashMatch:
                case css3Parser::Hash:
                case css3Parser::Percentage:
                case css3Parser::Url_:
                case css3Parser::UnicodeRange:
                case css3Parser::MediaOnly:
                case css3Parser::Not:
                case css3Parser::And:
                case css3Parser::Dimension:
                case css3Parser::UnknownDimension:
                case css3Parser::Plus:
                case css3Parser::Minus:
                case css3Parser::Number:
                case css3Parser::String_:
                case css3Parser::Or:
                case css3Parser::From:
                case css3Parser::To:
                case css3Parser::Ident:
                case css3Parser::Function_: {
                  setState(613);
                  any_();
                  break;
                }

                case css3Parser::OpenBrace: {
                  setState(614);
                  block();
                  break;
                }

                case css3Parser::AtKeyword: {
                  setState(615);
                  match(css3Parser::AtKeyword);
                  setState(616);
                  ws();
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(619); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

css3Parser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::TermContext *> css3Parser::ExprContext::term() {
  return getRuleContexts<css3Parser::TermContext>();
}

css3Parser::TermContext* css3Parser::ExprContext::term(size_t i) {
  return getRuleContext<css3Parser::TermContext>(i);
}

std::vector<css3Parser::Operator_Context *> css3Parser::ExprContext::operator_() {
  return getRuleContexts<css3Parser::Operator_Context>();
}

css3Parser::Operator_Context* css3Parser::ExprContext::operator_(size_t i) {
  return getRuleContext<css3Parser::Operator_Context>(i);
}


size_t css3Parser::ExprContext::getRuleIndex() const {
  return css3Parser::RuleExpr;
}

void css3Parser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void css3Parser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}


std::any css3Parser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::ExprContext* css3Parser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 70, css3Parser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(621);
    term();
    setState(628);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(623);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 1099511763200) != 0)) {
          setState(622);
          operator_();
        }
        setState(625);
        term(); 
      }
      setState(630);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

css3Parser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::TermContext::getRuleIndex() const {
  return css3Parser::RuleTerm;
}

void css3Parser::TermContext::copyFrom(TermContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BadTermContext ------------------------------------------------------------------

css3Parser::DxImageTransformContext* css3Parser::BadTermContext::dxImageTransform() {
  return getRuleContext<css3Parser::DxImageTransformContext>(0);
}

css3Parser::BadTermContext::BadTermContext(TermContext *ctx) { copyFrom(ctx); }

void css3Parser::BadTermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBadTerm(this);
}
void css3Parser::BadTermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBadTerm(this);
}

std::any css3Parser::BadTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitBadTerm(this);
  else
    return visitor->visitChildren(this);
}
//----------------- KnownTermContext ------------------------------------------------------------------

css3Parser::NumberContext* css3Parser::KnownTermContext::number() {
  return getRuleContext<css3Parser::NumberContext>(0);
}

css3Parser::WsContext* css3Parser::KnownTermContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::PercentageContext* css3Parser::KnownTermContext::percentage() {
  return getRuleContext<css3Parser::PercentageContext>(0);
}

css3Parser::DimensionContext* css3Parser::KnownTermContext::dimension() {
  return getRuleContext<css3Parser::DimensionContext>(0);
}

tree::TerminalNode* css3Parser::KnownTermContext::String_() {
  return getToken(css3Parser::String_, 0);
}

tree::TerminalNode* css3Parser::KnownTermContext::UnicodeRange() {
  return getToken(css3Parser::UnicodeRange, 0);
}

css3Parser::IdentContext* css3Parser::KnownTermContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

css3Parser::Var_Context* css3Parser::KnownTermContext::var_() {
  return getRuleContext<css3Parser::Var_Context>(0);
}

css3Parser::UrlContext* css3Parser::KnownTermContext::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

css3Parser::HexcolorContext* css3Parser::KnownTermContext::hexcolor() {
  return getRuleContext<css3Parser::HexcolorContext>(0);
}

css3Parser::CalcContext* css3Parser::KnownTermContext::calc() {
  return getRuleContext<css3Parser::CalcContext>(0);
}

css3Parser::Function_Context* css3Parser::KnownTermContext::function_() {
  return getRuleContext<css3Parser::Function_Context>(0);
}

css3Parser::ColorContext* css3Parser::KnownTermContext::color() {
  return getRuleContext<css3Parser::ColorContext>(0);
}

css3Parser::KnownTermContext::KnownTermContext(TermContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownTermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownTerm(this);
}
void css3Parser::KnownTermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownTerm(this);
}

std::any css3Parser::KnownTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitKnownTerm(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnknownTermContext ------------------------------------------------------------------

css3Parser::UnknownDimensionContext* css3Parser::UnknownTermContext::unknownDimension() {
  return getRuleContext<css3Parser::UnknownDimensionContext>(0);
}

css3Parser::WsContext* css3Parser::UnknownTermContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::UnknownTermContext::UnknownTermContext(TermContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownTermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownTerm(this);
}
void css3Parser::UnknownTermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownTerm(this);
}

std::any css3Parser::UnknownTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUnknownTerm(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::TermContext* css3Parser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 72, css3Parser::RuleTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(659);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(631);
      number();
      setState(632);
      ws();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(634);
      percentage();
      setState(635);
      ws();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(637);
      dimension();
      setState(638);
      ws();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(640);
      match(css3Parser::String_);
      setState(641);
      ws();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(642);
      match(css3Parser::UnicodeRange);
      setState(643);
      ws();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(644);
      ident();
      setState(645);
      ws();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(647);
      var_();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(648);
      url();
      setState(649);
      ws();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(651);
      hexcolor();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(652);
      calc();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(653);
      function_();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<css3Parser::KnownTermContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(654);
      color();
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<css3Parser::UnknownTermContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(655);
      unknownDimension();
      setState(656);
      ws();
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<css3Parser::BadTermContext>(_localctx);
      enterOuterAlt(_localctx, 14);
      setState(658);
      dxImageTransform();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_Context ------------------------------------------------------------------

css3Parser::Function_Context::Function_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::Function_Context::Function_() {
  return getToken(css3Parser::Function_, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::Function_Context::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::Function_Context::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::ExprContext* css3Parser::Function_Context::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

tree::TerminalNode* css3Parser::Function_Context::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::Function_Context::getRuleIndex() const {
  return css3Parser::RuleFunction_;
}

void css3Parser::Function_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_(this);
}

void css3Parser::Function_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_(this);
}


std::any css3Parser::Function_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFunction_(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::Function_Context* css3Parser::function_() {
  Function_Context *_localctx = _tracker.createInstance<Function_Context>(_ctx, getState());
  enterRule(_localctx, 74, css3Parser::RuleFunction_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    match(css3Parser::Function_);
    setState(662);
    ws();
    setState(663);
    expr();
    setState(664);
    match(css3Parser::CloseParen);
    setState(665);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DxImageTransformContext ------------------------------------------------------------------

css3Parser::DxImageTransformContext::DxImageTransformContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::DxImageTransformContext::DxImageTransform() {
  return getToken(css3Parser::DxImageTransform, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::DxImageTransformContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::DxImageTransformContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::ExprContext* css3Parser::DxImageTransformContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

tree::TerminalNode* css3Parser::DxImageTransformContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::DxImageTransformContext::getRuleIndex() const {
  return css3Parser::RuleDxImageTransform;
}

void css3Parser::DxImageTransformContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDxImageTransform(this);
}

void css3Parser::DxImageTransformContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDxImageTransform(this);
}


std::any css3Parser::DxImageTransformContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitDxImageTransform(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::DxImageTransformContext* css3Parser::dxImageTransform() {
  DxImageTransformContext *_localctx = _tracker.createInstance<DxImageTransformContext>(_ctx, getState());
  enterRule(_localctx, 76, css3Parser::RuleDxImageTransform);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(667);
    match(css3Parser::DxImageTransform);
    setState(668);
    ws();
    setState(669);
    expr();
    setState(670);
    match(css3Parser::CloseParen);
    setState(671);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HexcolorContext ------------------------------------------------------------------

css3Parser::HexcolorContext::HexcolorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::HexcolorContext::Hash() {
  return getToken(css3Parser::Hash, 0);
}

css3Parser::WsContext* css3Parser::HexcolorContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}


size_t css3Parser::HexcolorContext::getRuleIndex() const {
  return css3Parser::RuleHexcolor;
}

void css3Parser::HexcolorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHexcolor(this);
}

void css3Parser::HexcolorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHexcolor(this);
}


std::any css3Parser::HexcolorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitHexcolor(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::HexcolorContext* css3Parser::hexcolor() {
  HexcolorContext *_localctx = _tracker.createInstance<HexcolorContext>(_ctx, getState());
  enterRule(_localctx, 78, css3Parser::RuleHexcolor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(673);
    match(css3Parser::Hash);
    setState(674);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

css3Parser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::NumberContext::Number() {
  return getToken(css3Parser::Number, 0);
}

tree::TerminalNode* css3Parser::NumberContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::NumberContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::NumberContext::getRuleIndex() const {
  return css3Parser::RuleNumber;
}

void css3Parser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}

void css3Parser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}


std::any css3Parser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::NumberContext* css3Parser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 80, css3Parser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(676);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(679);
    match(css3Parser::Number);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PercentageContext ------------------------------------------------------------------

css3Parser::PercentageContext::PercentageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::PercentageContext::Percentage() {
  return getToken(css3Parser::Percentage, 0);
}

tree::TerminalNode* css3Parser::PercentageContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::PercentageContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::PercentageContext::getRuleIndex() const {
  return css3Parser::RulePercentage;
}

void css3Parser::PercentageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPercentage(this);
}

void css3Parser::PercentageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPercentage(this);
}


std::any css3Parser::PercentageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitPercentage(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::PercentageContext* css3Parser::percentage() {
  PercentageContext *_localctx = _tracker.createInstance<PercentageContext>(_ctx, getState());
  enterRule(_localctx, 82, css3Parser::RulePercentage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(682);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(681);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(684);
    match(css3Parser::Percentage);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimensionContext ------------------------------------------------------------------

css3Parser::DimensionContext::DimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::DimensionContext::Dimension() {
  return getToken(css3Parser::Dimension, 0);
}

tree::TerminalNode* css3Parser::DimensionContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::DimensionContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::DimensionContext::getRuleIndex() const {
  return css3Parser::RuleDimension;
}

void css3Parser::DimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimension(this);
}

void css3Parser::DimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimension(this);
}


std::any css3Parser::DimensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitDimension(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::DimensionContext* css3Parser::dimension() {
  DimensionContext *_localctx = _tracker.createInstance<DimensionContext>(_ctx, getState());
  enterRule(_localctx, 84, css3Parser::RuleDimension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(686);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(689);
    match(css3Parser::Dimension);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnknownDimensionContext ------------------------------------------------------------------

css3Parser::UnknownDimensionContext::UnknownDimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::UnknownDimensionContext::UnknownDimension() {
  return getToken(css3Parser::UnknownDimension, 0);
}

tree::TerminalNode* css3Parser::UnknownDimensionContext::Plus() {
  return getToken(css3Parser::Plus, 0);
}

tree::TerminalNode* css3Parser::UnknownDimensionContext::Minus() {
  return getToken(css3Parser::Minus, 0);
}


size_t css3Parser::UnknownDimensionContext::getRuleIndex() const {
  return css3Parser::RuleUnknownDimension;
}

void css3Parser::UnknownDimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownDimension(this);
}

void css3Parser::UnknownDimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownDimension(this);
}


std::any css3Parser::UnknownDimensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUnknownDimension(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::UnknownDimensionContext* css3Parser::unknownDimension() {
  UnknownDimensionContext *_localctx = _tracker.createInstance<UnknownDimensionContext>(_ctx, getState());
  enterRule(_localctx, 86, css3Parser::RuleUnknownDimension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(692);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == css3Parser::Plus

    || _la == css3Parser::Minus) {
      setState(691);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Plus

      || _la == css3Parser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(694);
    match(css3Parser::UnknownDimension);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Any_Context ------------------------------------------------------------------

css3Parser::Any_Context::Any_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::Any_Context::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

std::vector<css3Parser::WsContext *> css3Parser::Any_Context::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::Any_Context::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::NumberContext* css3Parser::Any_Context::number() {
  return getRuleContext<css3Parser::NumberContext>(0);
}

css3Parser::PercentageContext* css3Parser::Any_Context::percentage() {
  return getRuleContext<css3Parser::PercentageContext>(0);
}

css3Parser::DimensionContext* css3Parser::Any_Context::dimension() {
  return getRuleContext<css3Parser::DimensionContext>(0);
}

css3Parser::UnknownDimensionContext* css3Parser::Any_Context::unknownDimension() {
  return getRuleContext<css3Parser::UnknownDimensionContext>(0);
}

tree::TerminalNode* css3Parser::Any_Context::String_() {
  return getToken(css3Parser::String_, 0);
}

css3Parser::UrlContext* css3Parser::Any_Context::url() {
  return getRuleContext<css3Parser::UrlContext>(0);
}

tree::TerminalNode* css3Parser::Any_Context::Hash() {
  return getToken(css3Parser::Hash, 0);
}

tree::TerminalNode* css3Parser::Any_Context::UnicodeRange() {
  return getToken(css3Parser::UnicodeRange, 0);
}

tree::TerminalNode* css3Parser::Any_Context::Includes() {
  return getToken(css3Parser::Includes, 0);
}

tree::TerminalNode* css3Parser::Any_Context::DashMatch() {
  return getToken(css3Parser::DashMatch, 0);
}

tree::TerminalNode* css3Parser::Any_Context::Colon() {
  return getToken(css3Parser::Colon, 0);
}

tree::TerminalNode* css3Parser::Any_Context::Function_() {
  return getToken(css3Parser::Function_, 0);
}

tree::TerminalNode* css3Parser::Any_Context::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::Any_Context::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::Any_Context::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::UnusedContext *> css3Parser::Any_Context::unused() {
  return getRuleContexts<css3Parser::UnusedContext>();
}

css3Parser::UnusedContext* css3Parser::Any_Context::unused(size_t i) {
  return getRuleContext<css3Parser::UnusedContext>(i);
}

tree::TerminalNode* css3Parser::Any_Context::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

tree::TerminalNode* css3Parser::Any_Context::OpenBracket() {
  return getToken(css3Parser::OpenBracket, 0);
}

tree::TerminalNode* css3Parser::Any_Context::CloseBracket() {
  return getToken(css3Parser::CloseBracket, 0);
}


size_t css3Parser::Any_Context::getRuleIndex() const {
  return css3Parser::RuleAny_;
}

void css3Parser::Any_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAny_(this);
}

void css3Parser::Any_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAny_(this);
}


std::any css3Parser::Any_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitAny_(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::Any_Context* css3Parser::any_() {
  Any_Context *_localctx = _tracker.createInstance<Any_Context>(_ctx, getState());
  enterRule(_localctx, 88, css3Parser::RuleAny_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(762);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(696);
      ident();
      setState(697);
      ws();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(699);
      number();
      setState(700);
      ws();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(702);
      percentage();
      setState(703);
      ws();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(705);
      dimension();
      setState(706);
      ws();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(708);
      unknownDimension();
      setState(709);
      ws();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(711);
      match(css3Parser::String_);
      setState(712);
      ws();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(713);
      url();
      setState(714);
      ws();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(716);
      match(css3Parser::Hash);
      setState(717);
      ws();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(718);
      match(css3Parser::UnicodeRange);
      setState(719);
      ws();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(720);
      match(css3Parser::Includes);
      setState(721);
      ws();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(722);
      match(css3Parser::DashMatch);
      setState(723);
      ws();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(724);
      match(css3Parser::Colon);
      setState(725);
      ws();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(726);
      match(css3Parser::Function_);
      setState(727);
      ws();
      setState(732);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2320506645508850346) != 0) || _la == css3Parser::Ident

      || _la == css3Parser::Function_) {
        setState(730);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case css3Parser::OpenBracket:
          case css3Parser::OpenParen:
          case css3Parser::Colon:
          case css3Parser::Url:
          case css3Parser::Includes:
          case css3Parser::DashMatch:
          case css3Parser::Hash:
          case css3Parser::Percentage:
          case css3Parser::Url_:
          case css3Parser::UnicodeRange:
          case css3Parser::MediaOnly:
          case css3Parser::Not:
          case css3Parser::And:
          case css3Parser::Dimension:
          case css3Parser::UnknownDimension:
          case css3Parser::Plus:
          case css3Parser::Minus:
          case css3Parser::Number:
          case css3Parser::String_:
          case css3Parser::Or:
          case css3Parser::From:
          case css3Parser::To:
          case css3Parser::Ident:
          case css3Parser::Function_: {
            setState(728);
            any_();
            break;
          }

          case css3Parser::OpenBrace:
          case css3Parser::SemiColon:
          case css3Parser::Cdo:
          case css3Parser::Cdc:
          case css3Parser::AtKeyword: {
            setState(729);
            unused();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(734);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(735);
      match(css3Parser::CloseParen);
      setState(736);
      ws();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(738);
      match(css3Parser::OpenParen);
      setState(739);
      ws();
      setState(744);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2320506645508850346) != 0) || _la == css3Parser::Ident

      || _la == css3Parser::Function_) {
        setState(742);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case css3Parser::OpenBracket:
          case css3Parser::OpenParen:
          case css3Parser::Colon:
          case css3Parser::Url:
          case css3Parser::Includes:
          case css3Parser::DashMatch:
          case css3Parser::Hash:
          case css3Parser::Percentage:
          case css3Parser::Url_:
          case css3Parser::UnicodeRange:
          case css3Parser::MediaOnly:
          case css3Parser::Not:
          case css3Parser::And:
          case css3Parser::Dimension:
          case css3Parser::UnknownDimension:
          case css3Parser::Plus:
          case css3Parser::Minus:
          case css3Parser::Number:
          case css3Parser::String_:
          case css3Parser::Or:
          case css3Parser::From:
          case css3Parser::To:
          case css3Parser::Ident:
          case css3Parser::Function_: {
            setState(740);
            any_();
            break;
          }

          case css3Parser::OpenBrace:
          case css3Parser::SemiColon:
          case css3Parser::Cdo:
          case css3Parser::Cdc:
          case css3Parser::AtKeyword: {
            setState(741);
            unused();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(746);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(747);
      match(css3Parser::CloseParen);
      setState(748);
      ws();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(750);
      match(css3Parser::OpenBracket);
      setState(751);
      ws();
      setState(756);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2320506645508850346) != 0) || _la == css3Parser::Ident

      || _la == css3Parser::Function_) {
        setState(754);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case css3Parser::OpenBracket:
          case css3Parser::OpenParen:
          case css3Parser::Colon:
          case css3Parser::Url:
          case css3Parser::Includes:
          case css3Parser::DashMatch:
          case css3Parser::Hash:
          case css3Parser::Percentage:
          case css3Parser::Url_:
          case css3Parser::UnicodeRange:
          case css3Parser::MediaOnly:
          case css3Parser::Not:
          case css3Parser::And:
          case css3Parser::Dimension:
          case css3Parser::UnknownDimension:
          case css3Parser::Plus:
          case css3Parser::Minus:
          case css3Parser::Number:
          case css3Parser::String_:
          case css3Parser::Or:
          case css3Parser::From:
          case css3Parser::To:
          case css3Parser::Ident:
          case css3Parser::Function_: {
            setState(752);
            any_();
            break;
          }

          case css3Parser::OpenBrace:
          case css3Parser::SemiColon:
          case css3Parser::Cdo:
          case css3Parser::Cdc:
          case css3Parser::AtKeyword: {
            setState(753);
            unused();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(758);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(759);
      match(css3Parser::CloseBracket);
      setState(760);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtRuleContext ------------------------------------------------------------------

css3Parser::AtRuleContext::AtRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::AtRuleContext::getRuleIndex() const {
  return css3Parser::RuleAtRule;
}

void css3Parser::AtRuleContext::copyFrom(AtRuleContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnknownAtRuleContext ------------------------------------------------------------------

tree::TerminalNode* css3Parser::UnknownAtRuleContext::AtKeyword() {
  return getToken(css3Parser::AtKeyword, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::UnknownAtRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::UnknownAtRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::BlockContext* css3Parser::UnknownAtRuleContext::block() {
  return getRuleContext<css3Parser::BlockContext>(0);
}

tree::TerminalNode* css3Parser::UnknownAtRuleContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::UnknownAtRuleContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::UnknownAtRuleContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

css3Parser::UnknownAtRuleContext::UnknownAtRuleContext(AtRuleContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownAtRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownAtRule(this);
}
void css3Parser::UnknownAtRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownAtRule(this);
}

std::any css3Parser::UnknownAtRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUnknownAtRule(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::AtRuleContext* css3Parser::atRule() {
  AtRuleContext *_localctx = _tracker.createInstance<AtRuleContext>(_ctx, getState());
  enterRule(_localctx, 90, css3Parser::RuleAtRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    _localctx = _tracker.createInstance<css3Parser::UnknownAtRuleContext>(_localctx);
    enterOuterAlt(_localctx, 1);
    setState(764);
    match(css3Parser::AtKeyword);
    setState(765);
    ws();
    setState(769);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 14663636294369802) != 0) || _la == css3Parser::Ident

    || _la == css3Parser::Function_) {
      setState(766);
      any_();
      setState(771);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(775);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenBrace: {
        setState(772);
        block();
        break;
      }

      case css3Parser::SemiColon: {
        setState(773);
        match(css3Parser::SemiColon);
        setState(774);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnusedContext ------------------------------------------------------------------

css3Parser::UnusedContext::UnusedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::BlockContext* css3Parser::UnusedContext::block() {
  return getRuleContext<css3Parser::BlockContext>(0);
}

tree::TerminalNode* css3Parser::UnusedContext::AtKeyword() {
  return getToken(css3Parser::AtKeyword, 0);
}

css3Parser::WsContext* css3Parser::UnusedContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

tree::TerminalNode* css3Parser::UnusedContext::SemiColon() {
  return getToken(css3Parser::SemiColon, 0);
}

tree::TerminalNode* css3Parser::UnusedContext::Cdo() {
  return getToken(css3Parser::Cdo, 0);
}

tree::TerminalNode* css3Parser::UnusedContext::Cdc() {
  return getToken(css3Parser::Cdc, 0);
}


size_t css3Parser::UnusedContext::getRuleIndex() const {
  return css3Parser::RuleUnused;
}

void css3Parser::UnusedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnused(this);
}

void css3Parser::UnusedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnused(this);
}


std::any css3Parser::UnusedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUnused(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::UnusedContext* css3Parser::unused() {
  UnusedContext *_localctx = _tracker.createInstance<UnusedContext>(_ctx, getState());
  enterRule(_localctx, 92, css3Parser::RuleUnused);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(786);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenBrace: {
        enterOuterAlt(_localctx, 1);
        setState(777);
        block();
        break;
      }

      case css3Parser::AtKeyword: {
        enterOuterAlt(_localctx, 2);
        setState(778);
        match(css3Parser::AtKeyword);
        setState(779);
        ws();
        break;
      }

      case css3Parser::SemiColon: {
        enterOuterAlt(_localctx, 3);
        setState(780);
        match(css3Parser::SemiColon);
        setState(781);
        ws();
        break;
      }

      case css3Parser::Cdo: {
        enterOuterAlt(_localctx, 4);
        setState(782);
        match(css3Parser::Cdo);
        setState(783);
        ws();
        break;
      }

      case css3Parser::Cdc: {
        enterOuterAlt(_localctx, 5);
        setState(784);
        match(css3Parser::Cdc);
        setState(785);
        ws();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

css3Parser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::BlockContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::BlockContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::BlockContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::BlockContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::DeclarationListContext *> css3Parser::BlockContext::declarationList() {
  return getRuleContexts<css3Parser::DeclarationListContext>();
}

css3Parser::DeclarationListContext* css3Parser::BlockContext::declarationList(size_t i) {
  return getRuleContext<css3Parser::DeclarationListContext>(i);
}

std::vector<css3Parser::NestedStatementContext *> css3Parser::BlockContext::nestedStatement() {
  return getRuleContexts<css3Parser::NestedStatementContext>();
}

css3Parser::NestedStatementContext* css3Parser::BlockContext::nestedStatement(size_t i) {
  return getRuleContext<css3Parser::NestedStatementContext>(i);
}

std::vector<css3Parser::Any_Context *> css3Parser::BlockContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::BlockContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::BlockContext *> css3Parser::BlockContext::block() {
  return getRuleContexts<css3Parser::BlockContext>();
}

css3Parser::BlockContext* css3Parser::BlockContext::block(size_t i) {
  return getRuleContext<css3Parser::BlockContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::BlockContext::AtKeyword() {
  return getTokens(css3Parser::AtKeyword);
}

tree::TerminalNode* css3Parser::BlockContext::AtKeyword(size_t i) {
  return getToken(css3Parser::AtKeyword, i);
}

std::vector<tree::TerminalNode *> css3Parser::BlockContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::BlockContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::BlockContext::getRuleIndex() const {
  return css3Parser::RuleBlock;
}

void css3Parser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void css3Parser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}


std::any css3Parser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::BlockContext* css3Parser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 94, css3Parser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(788);
    match(css3Parser::OpenBrace);
    setState(789);
    ws();
    setState(800);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 7944099603307130538) != 0) || _la == css3Parser::Ident

    || _la == css3Parser::Function_) {
      setState(798);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
      case 1: {
        setState(790);
        declarationList();
        break;
      }

      case 2: {
        setState(791);
        nestedStatement();
        break;
      }

      case 3: {
        setState(792);
        any_();
        break;
      }

      case 4: {
        setState(793);
        block();
        break;
      }

      case 5: {
        setState(794);
        match(css3Parser::AtKeyword);
        setState(795);
        ws();
        break;
      }

      case 6: {
        setState(796);
        match(css3Parser::SemiColon);
        setState(797);
        ws();
        break;
      }

      default:
        break;
      }
      setState(802);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(803);
    match(css3Parser::CloseBrace);
    setState(804);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedStatementContext ------------------------------------------------------------------

css3Parser::NestedStatementContext::NestedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::RulesetContext* css3Parser::NestedStatementContext::ruleset() {
  return getRuleContext<css3Parser::RulesetContext>(0);
}

css3Parser::MediaContext* css3Parser::NestedStatementContext::media() {
  return getRuleContext<css3Parser::MediaContext>(0);
}

css3Parser::PageContext* css3Parser::NestedStatementContext::page() {
  return getRuleContext<css3Parser::PageContext>(0);
}

css3Parser::FontFaceRuleContext* css3Parser::NestedStatementContext::fontFaceRule() {
  return getRuleContext<css3Parser::FontFaceRuleContext>(0);
}

css3Parser::KeyframesRuleContext* css3Parser::NestedStatementContext::keyframesRule() {
  return getRuleContext<css3Parser::KeyframesRuleContext>(0);
}

css3Parser::SupportsRuleContext* css3Parser::NestedStatementContext::supportsRule() {
  return getRuleContext<css3Parser::SupportsRuleContext>(0);
}

css3Parser::ViewportContext* css3Parser::NestedStatementContext::viewport() {
  return getRuleContext<css3Parser::ViewportContext>(0);
}

css3Parser::CounterStyleContext* css3Parser::NestedStatementContext::counterStyle() {
  return getRuleContext<css3Parser::CounterStyleContext>(0);
}

css3Parser::FontFeatureValuesRuleContext* css3Parser::NestedStatementContext::fontFeatureValuesRule() {
  return getRuleContext<css3Parser::FontFeatureValuesRuleContext>(0);
}

css3Parser::AtRuleContext* css3Parser::NestedStatementContext::atRule() {
  return getRuleContext<css3Parser::AtRuleContext>(0);
}


size_t css3Parser::NestedStatementContext::getRuleIndex() const {
  return css3Parser::RuleNestedStatement;
}

void css3Parser::NestedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNestedStatement(this);
}

void css3Parser::NestedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNestedStatement(this);
}


std::any css3Parser::NestedStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitNestedStatement(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::NestedStatementContext* css3Parser::nestedStatement() {
  NestedStatementContext *_localctx = _tracker.createInstance<NestedStatementContext>(_ctx, getState());
  enterRule(_localctx, 96, css3Parser::RuleNestedStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(816);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenBracket:
      case css3Parser::OpenParen:
      case css3Parser::OpenBrace:
      case css3Parser::Colon:
      case css3Parser::Dot:
      case css3Parser::Multiply:
      case css3Parser::Pipe:
      case css3Parser::Url:
      case css3Parser::Includes:
      case css3Parser::DashMatch:
      case css3Parser::Hash:
      case css3Parser::Percentage:
      case css3Parser::Url_:
      case css3Parser::UnicodeRange:
      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Dimension:
      case css3Parser::UnknownDimension:
      case css3Parser::Plus:
      case css3Parser::Minus:
      case css3Parser::PseudoNot:
      case css3Parser::Number:
      case css3Parser::String_:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident:
      case css3Parser::Function_: {
        enterOuterAlt(_localctx, 1);
        setState(806);
        ruleset();
        break;
      }

      case css3Parser::Media: {
        enterOuterAlt(_localctx, 2);
        setState(807);
        media();
        break;
      }

      case css3Parser::Page: {
        enterOuterAlt(_localctx, 3);
        setState(808);
        page();
        break;
      }

      case css3Parser::FontFace: {
        enterOuterAlt(_localctx, 4);
        setState(809);
        fontFaceRule();
        break;
      }

      case css3Parser::Keyframes: {
        enterOuterAlt(_localctx, 5);
        setState(810);
        keyframesRule();
        break;
      }

      case css3Parser::Supports: {
        enterOuterAlt(_localctx, 6);
        setState(811);
        supportsRule();
        break;
      }

      case css3Parser::Viewport: {
        enterOuterAlt(_localctx, 7);
        setState(812);
        viewport();
        break;
      }

      case css3Parser::CounterStyle: {
        enterOuterAlt(_localctx, 8);
        setState(813);
        counterStyle();
        break;
      }

      case css3Parser::FontFeatureValues: {
        enterOuterAlt(_localctx, 9);
        setState(814);
        fontFeatureValuesRule();
        break;
      }

      case css3Parser::AtKeyword: {
        enterOuterAlt(_localctx, 10);
        setState(815);
        atRule();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupRuleBodyContext ------------------------------------------------------------------

css3Parser::GroupRuleBodyContext::GroupRuleBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::GroupRuleBodyContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::GroupRuleBodyContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::GroupRuleBodyContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::GroupRuleBodyContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::NestedStatementContext *> css3Parser::GroupRuleBodyContext::nestedStatement() {
  return getRuleContexts<css3Parser::NestedStatementContext>();
}

css3Parser::NestedStatementContext* css3Parser::GroupRuleBodyContext::nestedStatement(size_t i) {
  return getRuleContext<css3Parser::NestedStatementContext>(i);
}


size_t css3Parser::GroupRuleBodyContext::getRuleIndex() const {
  return css3Parser::RuleGroupRuleBody;
}

void css3Parser::GroupRuleBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupRuleBody(this);
}

void css3Parser::GroupRuleBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupRuleBody(this);
}


std::any css3Parser::GroupRuleBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitGroupRuleBody(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::GroupRuleBodyContext* css3Parser::groupRuleBody() {
  GroupRuleBodyContext *_localctx = _tracker.createInstance<GroupRuleBodyContext>(_ctx, getState());
  enterRule(_localctx, 98, css3Parser::RuleGroupRuleBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(818);
    match(css3Parser::OpenBrace);
    setState(819);
    ws();
    setState(823);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3332413584879726122) != 0) || _la == css3Parser::Ident

    || _la == css3Parser::Function_) {
      setState(820);
      nestedStatement();
      setState(825);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(826);
    match(css3Parser::CloseBrace);
    setState(827);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsRuleContext ------------------------------------------------------------------

css3Parser::SupportsRuleContext::SupportsRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsRuleContext::Supports() {
  return getToken(css3Parser::Supports, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::SupportsConditionContext* css3Parser::SupportsRuleContext::supportsCondition() {
  return getRuleContext<css3Parser::SupportsConditionContext>(0);
}

css3Parser::GroupRuleBodyContext* css3Parser::SupportsRuleContext::groupRuleBody() {
  return getRuleContext<css3Parser::GroupRuleBodyContext>(0);
}


size_t css3Parser::SupportsRuleContext::getRuleIndex() const {
  return css3Parser::RuleSupportsRule;
}

void css3Parser::SupportsRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsRule(this);
}

void css3Parser::SupportsRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsRule(this);
}


std::any css3Parser::SupportsRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSupportsRule(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SupportsRuleContext* css3Parser::supportsRule() {
  SupportsRuleContext *_localctx = _tracker.createInstance<SupportsRuleContext>(_ctx, getState());
  enterRule(_localctx, 100, css3Parser::RuleSupportsRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(829);
    match(css3Parser::Supports);
    setState(830);
    ws();
    setState(831);
    supportsCondition();
    setState(832);
    ws();
    setState(833);
    groupRuleBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsConditionContext ------------------------------------------------------------------

css3Parser::SupportsConditionContext::SupportsConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::SupportsNegationContext* css3Parser::SupportsConditionContext::supportsNegation() {
  return getRuleContext<css3Parser::SupportsNegationContext>(0);
}

css3Parser::SupportsConjunctionContext* css3Parser::SupportsConditionContext::supportsConjunction() {
  return getRuleContext<css3Parser::SupportsConjunctionContext>(0);
}

css3Parser::SupportsDisjunctionContext* css3Parser::SupportsConditionContext::supportsDisjunction() {
  return getRuleContext<css3Parser::SupportsDisjunctionContext>(0);
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsConditionContext::supportsConditionInParens() {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(0);
}


size_t css3Parser::SupportsConditionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsCondition;
}

void css3Parser::SupportsConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsCondition(this);
}

void css3Parser::SupportsConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsCondition(this);
}


std::any css3Parser::SupportsConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSupportsCondition(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SupportsConditionContext* css3Parser::supportsCondition() {
  SupportsConditionContext *_localctx = _tracker.createInstance<SupportsConditionContext>(_ctx, getState());
  enterRule(_localctx, 102, css3Parser::RuleSupportsCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(839);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(835);
      supportsNegation();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(836);
      supportsConjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(837);
      supportsDisjunction();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(838);
      supportsConditionInParens();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsConditionInParensContext ------------------------------------------------------------------

css3Parser::SupportsConditionInParensContext::SupportsConditionInParensContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsConditionInParensContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsConditionInParensContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsConditionInParensContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::SupportsConditionContext* css3Parser::SupportsConditionInParensContext::supportsCondition() {
  return getRuleContext<css3Parser::SupportsConditionContext>(0);
}

tree::TerminalNode* css3Parser::SupportsConditionInParensContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

css3Parser::SupportsDeclarationConditionContext* css3Parser::SupportsConditionInParensContext::supportsDeclarationCondition() {
  return getRuleContext<css3Parser::SupportsDeclarationConditionContext>(0);
}

css3Parser::GeneralEnclosedContext* css3Parser::SupportsConditionInParensContext::generalEnclosed() {
  return getRuleContext<css3Parser::GeneralEnclosedContext>(0);
}


size_t css3Parser::SupportsConditionInParensContext::getRuleIndex() const {
  return css3Parser::RuleSupportsConditionInParens;
}

void css3Parser::SupportsConditionInParensContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsConditionInParens(this);
}

void css3Parser::SupportsConditionInParensContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsConditionInParens(this);
}


std::any css3Parser::SupportsConditionInParensContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSupportsConditionInParens(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SupportsConditionInParensContext* css3Parser::supportsConditionInParens() {
  SupportsConditionInParensContext *_localctx = _tracker.createInstance<SupportsConditionInParensContext>(_ctx, getState());
  enterRule(_localctx, 104, css3Parser::RuleSupportsConditionInParens);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(849);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(841);
      match(css3Parser::OpenParen);
      setState(842);
      ws();
      setState(843);
      supportsCondition();
      setState(844);
      ws();
      setState(845);
      match(css3Parser::CloseParen);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(847);
      supportsDeclarationCondition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(848);
      generalEnclosed();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsNegationContext ------------------------------------------------------------------

css3Parser::SupportsNegationContext::SupportsNegationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsNegationContext::Not() {
  return getToken(css3Parser::Not, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsNegationContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsNegationContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::SupportsNegationContext::Space() {
  return getToken(css3Parser::Space, 0);
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsNegationContext::supportsConditionInParens() {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(0);
}


size_t css3Parser::SupportsNegationContext::getRuleIndex() const {
  return css3Parser::RuleSupportsNegation;
}

void css3Parser::SupportsNegationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsNegation(this);
}

void css3Parser::SupportsNegationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsNegation(this);
}


std::any css3Parser::SupportsNegationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSupportsNegation(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SupportsNegationContext* css3Parser::supportsNegation() {
  SupportsNegationContext *_localctx = _tracker.createInstance<SupportsNegationContext>(_ctx, getState());
  enterRule(_localctx, 106, css3Parser::RuleSupportsNegation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(851);
    match(css3Parser::Not);
    setState(852);
    ws();
    setState(853);
    match(css3Parser::Space);
    setState(854);
    ws();
    setState(855);
    supportsConditionInParens();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsConjunctionContext ------------------------------------------------------------------

css3Parser::SupportsConjunctionContext::SupportsConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SupportsConditionInParensContext *> css3Parser::SupportsConjunctionContext::supportsConditionInParens() {
  return getRuleContexts<css3Parser::SupportsConditionInParensContext>();
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsConjunctionContext::supportsConditionInParens(size_t i) {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsConjunctionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsConjunctionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsConjunctionContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::SupportsConjunctionContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsConjunctionContext::And() {
  return getTokens(css3Parser::And);
}

tree::TerminalNode* css3Parser::SupportsConjunctionContext::And(size_t i) {
  return getToken(css3Parser::And, i);
}


size_t css3Parser::SupportsConjunctionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsConjunction;
}

void css3Parser::SupportsConjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsConjunction(this);
}

void css3Parser::SupportsConjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsConjunction(this);
}


std::any css3Parser::SupportsConjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSupportsConjunction(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SupportsConjunctionContext* css3Parser::supportsConjunction() {
  SupportsConjunctionContext *_localctx = _tracker.createInstance<SupportsConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 108, css3Parser::RuleSupportsConjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(857);
    supportsConditionInParens();
    setState(867); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(858);
              ws();
              setState(859);
              match(css3Parser::Space);
              setState(860);
              ws();
              setState(861);
              match(css3Parser::And);
              setState(862);
              ws();
              setState(863);
              match(css3Parser::Space);
              setState(864);
              ws();
              setState(865);
              supportsConditionInParens();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(869); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsDisjunctionContext ------------------------------------------------------------------

css3Parser::SupportsDisjunctionContext::SupportsDisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::SupportsConditionInParensContext *> css3Parser::SupportsDisjunctionContext::supportsConditionInParens() {
  return getRuleContexts<css3Parser::SupportsConditionInParensContext>();
}

css3Parser::SupportsConditionInParensContext* css3Parser::SupportsDisjunctionContext::supportsConditionInParens(size_t i) {
  return getRuleContext<css3Parser::SupportsConditionInParensContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::SupportsDisjunctionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::SupportsDisjunctionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsDisjunctionContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::SupportsDisjunctionContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<tree::TerminalNode *> css3Parser::SupportsDisjunctionContext::Or() {
  return getTokens(css3Parser::Or);
}

tree::TerminalNode* css3Parser::SupportsDisjunctionContext::Or(size_t i) {
  return getToken(css3Parser::Or, i);
}


size_t css3Parser::SupportsDisjunctionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsDisjunction;
}

void css3Parser::SupportsDisjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsDisjunction(this);
}

void css3Parser::SupportsDisjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsDisjunction(this);
}


std::any css3Parser::SupportsDisjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSupportsDisjunction(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SupportsDisjunctionContext* css3Parser::supportsDisjunction() {
  SupportsDisjunctionContext *_localctx = _tracker.createInstance<SupportsDisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 110, css3Parser::RuleSupportsDisjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(871);
    supportsConditionInParens();
    setState(881); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(872);
              ws();
              setState(873);
              match(css3Parser::Space);
              setState(874);
              ws();
              setState(875);
              match(css3Parser::Or);
              setState(876);
              ws();
              setState(877);
              match(css3Parser::Space);
              setState(878);
              ws();
              setState(879);
              supportsConditionInParens();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(883); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SupportsDeclarationConditionContext ------------------------------------------------------------------

css3Parser::SupportsDeclarationConditionContext::SupportsDeclarationConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::SupportsDeclarationConditionContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

css3Parser::WsContext* css3Parser::SupportsDeclarationConditionContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::DeclarationContext* css3Parser::SupportsDeclarationConditionContext::declaration() {
  return getRuleContext<css3Parser::DeclarationContext>(0);
}

tree::TerminalNode* css3Parser::SupportsDeclarationConditionContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::SupportsDeclarationConditionContext::getRuleIndex() const {
  return css3Parser::RuleSupportsDeclarationCondition;
}

void css3Parser::SupportsDeclarationConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSupportsDeclarationCondition(this);
}

void css3Parser::SupportsDeclarationConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSupportsDeclarationCondition(this);
}


std::any css3Parser::SupportsDeclarationConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitSupportsDeclarationCondition(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::SupportsDeclarationConditionContext* css3Parser::supportsDeclarationCondition() {
  SupportsDeclarationConditionContext *_localctx = _tracker.createInstance<SupportsDeclarationConditionContext>(_ctx, getState());
  enterRule(_localctx, 112, css3Parser::RuleSupportsDeclarationCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(885);
    match(css3Parser::OpenParen);
    setState(886);
    ws();
    setState(887);
    declaration();
    setState(888);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralEnclosedContext ------------------------------------------------------------------

css3Parser::GeneralEnclosedContext::GeneralEnclosedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::GeneralEnclosedContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

tree::TerminalNode* css3Parser::GeneralEnclosedContext::Function_() {
  return getToken(css3Parser::Function_, 0);
}

tree::TerminalNode* css3Parser::GeneralEnclosedContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

std::vector<css3Parser::Any_Context *> css3Parser::GeneralEnclosedContext::any_() {
  return getRuleContexts<css3Parser::Any_Context>();
}

css3Parser::Any_Context* css3Parser::GeneralEnclosedContext::any_(size_t i) {
  return getRuleContext<css3Parser::Any_Context>(i);
}

std::vector<css3Parser::UnusedContext *> css3Parser::GeneralEnclosedContext::unused() {
  return getRuleContexts<css3Parser::UnusedContext>();
}

css3Parser::UnusedContext* css3Parser::GeneralEnclosedContext::unused(size_t i) {
  return getRuleContext<css3Parser::UnusedContext>(i);
}


size_t css3Parser::GeneralEnclosedContext::getRuleIndex() const {
  return css3Parser::RuleGeneralEnclosed;
}

void css3Parser::GeneralEnclosedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneralEnclosed(this);
}

void css3Parser::GeneralEnclosedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneralEnclosed(this);
}


std::any css3Parser::GeneralEnclosedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitGeneralEnclosed(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::GeneralEnclosedContext* css3Parser::generalEnclosed() {
  GeneralEnclosedContext *_localctx = _tracker.createInstance<GeneralEnclosedContext>(_ctx, getState());
  enterRule(_localctx, 114, css3Parser::RuleGeneralEnclosed);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(890);
    _la = _input->LA(1);
    if (!(_la == css3Parser::OpenParen

    || _la == css3Parser::Function_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(895);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2320506645508850346) != 0) || _la == css3Parser::Ident

    || _la == css3Parser::Function_) {
      setState(893);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case css3Parser::OpenBracket:
        case css3Parser::OpenParen:
        case css3Parser::Colon:
        case css3Parser::Url:
        case css3Parser::Includes:
        case css3Parser::DashMatch:
        case css3Parser::Hash:
        case css3Parser::Percentage:
        case css3Parser::Url_:
        case css3Parser::UnicodeRange:
        case css3Parser::MediaOnly:
        case css3Parser::Not:
        case css3Parser::And:
        case css3Parser::Dimension:
        case css3Parser::UnknownDimension:
        case css3Parser::Plus:
        case css3Parser::Minus:
        case css3Parser::Number:
        case css3Parser::String_:
        case css3Parser::Or:
        case css3Parser::From:
        case css3Parser::To:
        case css3Parser::Ident:
        case css3Parser::Function_: {
          setState(891);
          any_();
          break;
        }

        case css3Parser::OpenBrace:
        case css3Parser::SemiColon:
        case css3Parser::Cdo:
        case css3Parser::Cdc:
        case css3Parser::AtKeyword: {
          setState(892);
          unused();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(897);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(898);
    match(css3Parser::CloseParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UrlContext ------------------------------------------------------------------

css3Parser::UrlContext::UrlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::UrlContext::Url_() {
  return getToken(css3Parser::Url_, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::UrlContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::UrlContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::UrlContext::String_() {
  return getToken(css3Parser::String_, 0);
}

tree::TerminalNode* css3Parser::UrlContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

tree::TerminalNode* css3Parser::UrlContext::Url() {
  return getToken(css3Parser::Url, 0);
}


size_t css3Parser::UrlContext::getRuleIndex() const {
  return css3Parser::RuleUrl;
}

void css3Parser::UrlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUrl(this);
}

void css3Parser::UrlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUrl(this);
}


std::any css3Parser::UrlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUrl(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::UrlContext* css3Parser::url() {
  UrlContext *_localctx = _tracker.createInstance<UrlContext>(_ctx, getState());
  enterRule(_localctx, 116, css3Parser::RuleUrl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(907);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::Url_: {
        enterOuterAlt(_localctx, 1);
        setState(900);
        match(css3Parser::Url_);
        setState(901);
        ws();
        setState(902);
        match(css3Parser::String_);
        setState(903);
        ws();
        setState(904);
        match(css3Parser::CloseParen);
        break;
      }

      case css3Parser::Url: {
        enterOuterAlt(_localctx, 2);
        setState(906);
        match(css3Parser::Url);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Var_Context ------------------------------------------------------------------

css3Parser::Var_Context::Var_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::Var_Context::Var() {
  return getToken(css3Parser::Var, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::Var_Context::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::Var_Context::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::Var_Context::Variable() {
  return getToken(css3Parser::Variable, 0);
}

tree::TerminalNode* css3Parser::Var_Context::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::Var_Context::getRuleIndex() const {
  return css3Parser::RuleVar_;
}

void css3Parser::Var_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVar_(this);
}

void css3Parser::Var_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVar_(this);
}


std::any css3Parser::Var_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitVar_(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::Var_Context* css3Parser::var_() {
  Var_Context *_localctx = _tracker.createInstance<Var_Context>(_ctx, getState());
  enterRule(_localctx, 118, css3Parser::RuleVar_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(909);
    match(css3Parser::Var);
    setState(910);
    ws();
    setState(911);
    match(css3Parser::Variable);
    setState(912);
    ws();
    setState(913);
    match(css3Parser::CloseParen);
    setState(914);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcContext ------------------------------------------------------------------

css3Parser::CalcContext::CalcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::CalcContext::Calc() {
  return getToken(css3Parser::Calc, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::CalcContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CalcContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::CalcExprContext* css3Parser::CalcContext::calcExpr() {
  return getRuleContext<css3Parser::CalcExprContext>(0);
}

tree::TerminalNode* css3Parser::CalcContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::CalcContext::getRuleIndex() const {
  return css3Parser::RuleCalc;
}

void css3Parser::CalcContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalc(this);
}

void css3Parser::CalcContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalc(this);
}


std::any css3Parser::CalcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitCalc(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::CalcContext* css3Parser::calc() {
  CalcContext *_localctx = _tracker.createInstance<CalcContext>(_ctx, getState());
  enterRule(_localctx, 120, css3Parser::RuleCalc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(916);
    match(css3Parser::Calc);
    setState(917);
    ws();
    setState(918);
    calcExpr();
    setState(919);
    match(css3Parser::CloseParen);
    setState(920);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcOperandContext ------------------------------------------------------------------

css3Parser::CalcOperandContext::CalcOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::CalcValueContext* css3Parser::CalcOperandContext::calcValue() {
  return getRuleContext<css3Parser::CalcValueContext>(0);
}

std::vector<tree::TerminalNode *> css3Parser::CalcOperandContext::Plus() {
  return getTokens(css3Parser::Plus);
}

tree::TerminalNode* css3Parser::CalcOperandContext::Plus(size_t i) {
  return getToken(css3Parser::Plus, i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcOperandContext::Minus() {
  return getTokens(css3Parser::Minus);
}

tree::TerminalNode* css3Parser::CalcOperandContext::Minus(size_t i) {
  return getToken(css3Parser::Minus, i);
}


size_t css3Parser::CalcOperandContext::getRuleIndex() const {
  return css3Parser::RuleCalcOperand;
}

void css3Parser::CalcOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalcOperand(this);
}

void css3Parser::CalcOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalcOperand(this);
}


std::any css3Parser::CalcOperandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitCalcOperand(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::CalcOperandContext* css3Parser::calcOperand() {
  CalcOperandContext *_localctx = _tracker.createInstance<CalcOperandContext>(_ctx, getState());
  enterRule(_localctx, 122, css3Parser::RuleCalcOperand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(925);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(922);
        _la = _input->LA(1);
        if (!(_la == css3Parser::Plus

        || _la == css3Parser::Minus)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        } 
      }
      setState(927);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    }
    setState(928);
    calcValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcExprContext ------------------------------------------------------------------

css3Parser::CalcExprContext::CalcExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::CalcOperandContext *> css3Parser::CalcExprContext::calcOperand() {
  return getRuleContexts<css3Parser::CalcOperandContext>();
}

css3Parser::CalcOperandContext* css3Parser::CalcExprContext::calcOperand(size_t i) {
  return getRuleContext<css3Parser::CalcOperandContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::CalcExprContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CalcExprContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcExprContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::CalcExprContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcExprContext::Plus() {
  return getTokens(css3Parser::Plus);
}

tree::TerminalNode* css3Parser::CalcExprContext::Plus(size_t i) {
  return getToken(css3Parser::Plus, i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcExprContext::Minus() {
  return getTokens(css3Parser::Minus);
}

tree::TerminalNode* css3Parser::CalcExprContext::Minus(size_t i) {
  return getToken(css3Parser::Minus, i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcExprContext::Divide() {
  return getTokens(css3Parser::Divide);
}

tree::TerminalNode* css3Parser::CalcExprContext::Divide(size_t i) {
  return getToken(css3Parser::Divide, i);
}

std::vector<tree::TerminalNode *> css3Parser::CalcExprContext::Multiply() {
  return getTokens(css3Parser::Multiply);
}

tree::TerminalNode* css3Parser::CalcExprContext::Multiply(size_t i) {
  return getToken(css3Parser::Multiply, i);
}


size_t css3Parser::CalcExprContext::getRuleIndex() const {
  return css3Parser::RuleCalcExpr;
}

void css3Parser::CalcExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalcExpr(this);
}

void css3Parser::CalcExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalcExpr(this);
}


std::any css3Parser::CalcExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitCalcExpr(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::CalcExprContext* css3Parser::calcExpr() {
  CalcExprContext *_localctx = _tracker.createInstance<CalcExprContext>(_ctx, getState());
  enterRule(_localctx, 124, css3Parser::RuleCalcExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(930);
    calcOperand();
    setState(940);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(931);
        match(css3Parser::Space);
        setState(932);
        ws();
        setState(933);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 412316866560) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(934);
        match(css3Parser::Space);
        setState(935);
        ws();
        setState(936);
        calcOperand(); 
      }
      setState(942);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    }
    setState(943);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcNestedValueContext ------------------------------------------------------------------

css3Parser::CalcNestedValueContext::CalcNestedValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::CalcNestedValueContext::OpenParen() {
  return getToken(css3Parser::OpenParen, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::CalcNestedValueContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CalcNestedValueContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::CalcExprContext* css3Parser::CalcNestedValueContext::calcExpr() {
  return getRuleContext<css3Parser::CalcExprContext>(0);
}

tree::TerminalNode* css3Parser::CalcNestedValueContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}


size_t css3Parser::CalcNestedValueContext::getRuleIndex() const {
  return css3Parser::RuleCalcNestedValue;
}

void css3Parser::CalcNestedValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalcNestedValue(this);
}

void css3Parser::CalcNestedValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalcNestedValue(this);
}


std::any css3Parser::CalcNestedValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitCalcNestedValue(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::CalcNestedValueContext* css3Parser::calcNestedValue() {
  CalcNestedValueContext *_localctx = _tracker.createInstance<CalcNestedValueContext>(_ctx, getState());
  enterRule(_localctx, 126, css3Parser::RuleCalcNestedValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(945);
    match(css3Parser::OpenParen);
    setState(946);
    ws();
    setState(947);
    calcExpr();
    setState(948);
    match(css3Parser::CloseParen);
    setState(949);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CalcValueContext ------------------------------------------------------------------

css3Parser::CalcValueContext::CalcValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::NumberContext* css3Parser::CalcValueContext::number() {
  return getRuleContext<css3Parser::NumberContext>(0);
}

css3Parser::WsContext* css3Parser::CalcValueContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::DimensionContext* css3Parser::CalcValueContext::dimension() {
  return getRuleContext<css3Parser::DimensionContext>(0);
}

css3Parser::UnknownDimensionContext* css3Parser::CalcValueContext::unknownDimension() {
  return getRuleContext<css3Parser::UnknownDimensionContext>(0);
}

css3Parser::PercentageContext* css3Parser::CalcValueContext::percentage() {
  return getRuleContext<css3Parser::PercentageContext>(0);
}

css3Parser::CalcNestedValueContext* css3Parser::CalcValueContext::calcNestedValue() {
  return getRuleContext<css3Parser::CalcNestedValueContext>(0);
}


size_t css3Parser::CalcValueContext::getRuleIndex() const {
  return css3Parser::RuleCalcValue;
}

void css3Parser::CalcValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalcValue(this);
}

void css3Parser::CalcValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalcValue(this);
}


std::any css3Parser::CalcValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitCalcValue(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::CalcValueContext* css3Parser::calcValue() {
  CalcValueContext *_localctx = _tracker.createInstance<CalcValueContext>(_ctx, getState());
  enterRule(_localctx, 128, css3Parser::RuleCalcValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(966);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(951);
      number();
      setState(952);
      ws();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(954);
      dimension();
      setState(955);
      ws();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(957);
      unknownDimension();
      setState(958);
      ws();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(960);
      percentage();
      setState(961);
      ws();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(963);
      calcNestedValue();
      setState(964);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFaceRuleContext ------------------------------------------------------------------

css3Parser::FontFaceRuleContext::FontFaceRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::FontFace() {
  return getToken(css3Parser::FontFace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFaceRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFaceRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::FontFaceDeclarationContext *> css3Parser::FontFaceRuleContext::fontFaceDeclaration() {
  return getRuleContexts<css3Parser::FontFaceDeclarationContext>();
}

css3Parser::FontFaceDeclarationContext* css3Parser::FontFaceRuleContext::fontFaceDeclaration(size_t i) {
  return getRuleContext<css3Parser::FontFaceDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::FontFaceRuleContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::FontFaceRuleContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::FontFaceRuleContext::getRuleIndex() const {
  return css3Parser::RuleFontFaceRule;
}

void css3Parser::FontFaceRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFaceRule(this);
}

void css3Parser::FontFaceRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFaceRule(this);
}


std::any css3Parser::FontFaceRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFontFaceRule(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FontFaceRuleContext* css3Parser::fontFaceRule() {
  FontFaceRuleContext *_localctx = _tracker.createInstance<FontFaceRuleContext>(_ctx, getState());
  enterRule(_localctx, 130, css3Parser::RuleFontFaceRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    match(css3Parser::FontFace);
    setState(969);
    ws();
    setState(970);
    match(css3Parser::OpenBrace);
    setState(971);
    ws();
    setState(973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 11) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 11)) & 11266145908686857) != 0)) {
      setState(972);
      fontFaceDeclaration();
    }
    setState(982);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::SemiColon) {
      setState(975);
      match(css3Parser::SemiColon);
      setState(976);
      ws();
      setState(978);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 11) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 11)) & 11266145908686857) != 0)) {
        setState(977);
        fontFaceDeclaration();
      }
      setState(984);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(985);
    match(css3Parser::CloseBrace);
    setState(986);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFaceDeclarationContext ------------------------------------------------------------------

css3Parser::FontFaceDeclarationContext::FontFaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t css3Parser::FontFaceDeclarationContext::getRuleIndex() const {
  return css3Parser::RuleFontFaceDeclaration;
}

void css3Parser::FontFaceDeclarationContext::copyFrom(FontFaceDeclarationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- KnownFontFaceDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::KnownFontFaceDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::KnownFontFaceDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::KnownFontFaceDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ExprContext* css3Parser::KnownFontFaceDeclarationContext::expr() {
  return getRuleContext<css3Parser::ExprContext>(0);
}

css3Parser::KnownFontFaceDeclarationContext::KnownFontFaceDeclarationContext(FontFaceDeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::KnownFontFaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnownFontFaceDeclaration(this);
}
void css3Parser::KnownFontFaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnownFontFaceDeclaration(this);
}

std::any css3Parser::KnownFontFaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitKnownFontFaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnknownFontFaceDeclarationContext ------------------------------------------------------------------

css3Parser::Property_Context* css3Parser::UnknownFontFaceDeclarationContext::property_() {
  return getRuleContext<css3Parser::Property_Context>(0);
}

tree::TerminalNode* css3Parser::UnknownFontFaceDeclarationContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

css3Parser::WsContext* css3Parser::UnknownFontFaceDeclarationContext::ws() {
  return getRuleContext<css3Parser::WsContext>(0);
}

css3Parser::ValueContext* css3Parser::UnknownFontFaceDeclarationContext::value() {
  return getRuleContext<css3Parser::ValueContext>(0);
}

css3Parser::UnknownFontFaceDeclarationContext::UnknownFontFaceDeclarationContext(FontFaceDeclarationContext *ctx) { copyFrom(ctx); }

void css3Parser::UnknownFontFaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknownFontFaceDeclaration(this);
}
void css3Parser::UnknownFontFaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknownFontFaceDeclaration(this);
}

std::any css3Parser::UnknownFontFaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitUnknownFontFaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}
css3Parser::FontFaceDeclarationContext* css3Parser::fontFaceDeclaration() {
  FontFaceDeclarationContext *_localctx = _tracker.createInstance<FontFaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 132, css3Parser::RuleFontFaceDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(998);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<css3Parser::KnownFontFaceDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(988);
      property_();
      setState(989);
      match(css3Parser::Colon);
      setState(990);
      ws();
      setState(991);
      expr();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<css3Parser::UnknownFontFaceDeclarationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(993);
      property_();
      setState(994);
      match(css3Parser::Colon);
      setState(995);
      ws();
      setState(996);
      value();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeyframesRuleContext ------------------------------------------------------------------

css3Parser::KeyframesRuleContext::KeyframesRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::Keyframes() {
  return getToken(css3Parser::Keyframes, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::KeyframesRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KeyframesRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::Space() {
  return getToken(css3Parser::Space, 0);
}

css3Parser::IdentContext* css3Parser::KeyframesRuleContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::KeyframesRuleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::KeyframeBlockContext *> css3Parser::KeyframesRuleContext::keyframeBlock() {
  return getRuleContexts<css3Parser::KeyframeBlockContext>();
}

css3Parser::KeyframeBlockContext* css3Parser::KeyframesRuleContext::keyframeBlock(size_t i) {
  return getRuleContext<css3Parser::KeyframeBlockContext>(i);
}


size_t css3Parser::KeyframesRuleContext::getRuleIndex() const {
  return css3Parser::RuleKeyframesRule;
}

void css3Parser::KeyframesRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyframesRule(this);
}

void css3Parser::KeyframesRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyframesRule(this);
}


std::any css3Parser::KeyframesRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitKeyframesRule(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::KeyframesRuleContext* css3Parser::keyframesRule() {
  KeyframesRuleContext *_localctx = _tracker.createInstance<KeyframesRuleContext>(_ctx, getState());
  enterRule(_localctx, 134, css3Parser::RuleKeyframesRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    match(css3Parser::Keyframes);
    setState(1001);
    ws();
    setState(1002);
    match(css3Parser::Space);
    setState(1003);
    ws();
    setState(1004);
    ident();
    setState(1005);
    ws();
    setState(1006);
    match(css3Parser::OpenBrace);
    setState(1007);
    ws();
    setState(1011);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13510799418982400) != 0)) {
      setState(1008);
      keyframeBlock();
      setState(1013);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1014);
    match(css3Parser::CloseBrace);
    setState(1015);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeyframeBlockContext ------------------------------------------------------------------

css3Parser::KeyframeBlockContext::KeyframeBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::KeyframeSelectorContext* css3Parser::KeyframeBlockContext::keyframeSelector() {
  return getRuleContext<css3Parser::KeyframeSelectorContext>(0);
}

tree::TerminalNode* css3Parser::KeyframeBlockContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::KeyframeBlockContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KeyframeBlockContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::KeyframeBlockContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::KeyframeBlockContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}


size_t css3Parser::KeyframeBlockContext::getRuleIndex() const {
  return css3Parser::RuleKeyframeBlock;
}

void css3Parser::KeyframeBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyframeBlock(this);
}

void css3Parser::KeyframeBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyframeBlock(this);
}


std::any css3Parser::KeyframeBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitKeyframeBlock(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::KeyframeBlockContext* css3Parser::keyframeBlock() {
  KeyframeBlockContext *_localctx = _tracker.createInstance<KeyframeBlockContext>(_ctx, getState());
  enterRule(_localctx, 136, css3Parser::RuleKeyframeBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1017);
    keyframeSelector();
    setState(1018);
    match(css3Parser::OpenBrace);
    setState(1019);
    ws();
    setState(1021);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & 180258334538989713) != 0)) {
      setState(1020);
      declarationList();
    }
    setState(1023);
    match(css3Parser::CloseBrace);
    setState(1024);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeyframeSelectorContext ------------------------------------------------------------------

css3Parser::KeyframeSelectorContext::KeyframeSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::KeyframeSelectorContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::KeyframeSelectorContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::From() {
  return getTokens(css3Parser::From);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::From(size_t i) {
  return getToken(css3Parser::From, i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::To() {
  return getTokens(css3Parser::To);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::To(size_t i) {
  return getToken(css3Parser::To, i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::Percentage() {
  return getTokens(css3Parser::Percentage);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::Percentage(size_t i) {
  return getToken(css3Parser::Percentage, i);
}

std::vector<tree::TerminalNode *> css3Parser::KeyframeSelectorContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::KeyframeSelectorContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}


size_t css3Parser::KeyframeSelectorContext::getRuleIndex() const {
  return css3Parser::RuleKeyframeSelector;
}

void css3Parser::KeyframeSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyframeSelector(this);
}

void css3Parser::KeyframeSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyframeSelector(this);
}


std::any css3Parser::KeyframeSelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitKeyframeSelector(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::KeyframeSelectorContext* css3Parser::keyframeSelector() {
  KeyframeSelectorContext *_localctx = _tracker.createInstance<KeyframeSelectorContext>(_ctx, getState());
  enterRule(_localctx, 138, css3Parser::RuleKeyframeSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1026);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13510799418982400) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1027);
    ws();
    setState(1035);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::Comma) {
      setState(1028);
      match(css3Parser::Comma);
      setState(1029);
      ws();
      setState(1030);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 13510799418982400) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1031);
      ws();
      setState(1037);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ViewportContext ------------------------------------------------------------------

css3Parser::ViewportContext::ViewportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::ViewportContext::Viewport() {
  return getToken(css3Parser::Viewport, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::ViewportContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::ViewportContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::ViewportContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::ViewportContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::ViewportContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}


size_t css3Parser::ViewportContext::getRuleIndex() const {
  return css3Parser::RuleViewport;
}

void css3Parser::ViewportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterViewport(this);
}

void css3Parser::ViewportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitViewport(this);
}


std::any css3Parser::ViewportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitViewport(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::ViewportContext* css3Parser::viewport() {
  ViewportContext *_localctx = _tracker.createInstance<ViewportContext>(_ctx, getState());
  enterRule(_localctx, 140, css3Parser::RuleViewport);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    match(css3Parser::Viewport);
    setState(1039);
    ws();
    setState(1040);
    match(css3Parser::OpenBrace);
    setState(1041);
    ws();
    setState(1043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & 180258334538989713) != 0)) {
      setState(1042);
      declarationList();
    }
    setState(1045);
    match(css3Parser::CloseBrace);
    setState(1046);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CounterStyleContext ------------------------------------------------------------------

css3Parser::CounterStyleContext::CounterStyleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::CounterStyleContext::CounterStyle() {
  return getToken(css3Parser::CounterStyle, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::CounterStyleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::CounterStyleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::IdentContext* css3Parser::CounterStyleContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

tree::TerminalNode* css3Parser::CounterStyleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::CounterStyleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

css3Parser::DeclarationListContext* css3Parser::CounterStyleContext::declarationList() {
  return getRuleContext<css3Parser::DeclarationListContext>(0);
}


size_t css3Parser::CounterStyleContext::getRuleIndex() const {
  return css3Parser::RuleCounterStyle;
}

void css3Parser::CounterStyleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCounterStyle(this);
}

void css3Parser::CounterStyleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCounterStyle(this);
}


std::any css3Parser::CounterStyleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitCounterStyle(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::CounterStyleContext* css3Parser::counterStyle() {
  CounterStyleContext *_localctx = _tracker.createInstance<CounterStyleContext>(_ctx, getState());
  enterRule(_localctx, 142, css3Parser::RuleCounterStyle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    match(css3Parser::CounterStyle);
    setState(1049);
    ws();
    setState(1050);
    ident();
    setState(1051);
    ws();
    setState(1052);
    match(css3Parser::OpenBrace);
    setState(1053);
    ws();
    setState(1055);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & 180258334538989713) != 0)) {
      setState(1054);
      declarationList();
    }
    setState(1057);
    match(css3Parser::CloseBrace);
    setState(1058);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFeatureValuesRuleContext ------------------------------------------------------------------

css3Parser::FontFeatureValuesRuleContext::FontFeatureValuesRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FontFeatureValuesRuleContext::FontFeatureValues() {
  return getToken(css3Parser::FontFeatureValues, 0);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFeatureValuesRuleContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFeatureValuesRuleContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

css3Parser::FontFamilyNameListContext* css3Parser::FontFeatureValuesRuleContext::fontFamilyNameList() {
  return getRuleContext<css3Parser::FontFamilyNameListContext>(0);
}

tree::TerminalNode* css3Parser::FontFeatureValuesRuleContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::FontFeatureValuesRuleContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::FeatureValueBlockContext *> css3Parser::FontFeatureValuesRuleContext::featureValueBlock() {
  return getRuleContexts<css3Parser::FeatureValueBlockContext>();
}

css3Parser::FeatureValueBlockContext* css3Parser::FontFeatureValuesRuleContext::featureValueBlock(size_t i) {
  return getRuleContext<css3Parser::FeatureValueBlockContext>(i);
}


size_t css3Parser::FontFeatureValuesRuleContext::getRuleIndex() const {
  return css3Parser::RuleFontFeatureValuesRule;
}

void css3Parser::FontFeatureValuesRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFeatureValuesRule(this);
}

void css3Parser::FontFeatureValuesRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFeatureValuesRule(this);
}


std::any css3Parser::FontFeatureValuesRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFontFeatureValuesRule(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FontFeatureValuesRuleContext* css3Parser::fontFeatureValuesRule() {
  FontFeatureValuesRuleContext *_localctx = _tracker.createInstance<FontFeatureValuesRuleContext>(_ctx, getState());
  enterRule(_localctx, 144, css3Parser::RuleFontFeatureValuesRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1060);
    match(css3Parser::FontFeatureValues);
    setState(1061);
    ws();
    setState(1062);
    fontFamilyNameList();
    setState(1063);
    ws();
    setState(1064);
    match(css3Parser::OpenBrace);
    setState(1065);
    ws();
    setState(1069);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == css3Parser::AtKeyword) {
      setState(1066);
      featureValueBlock();
      setState(1071);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1072);
    match(css3Parser::CloseBrace);
    setState(1073);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFamilyNameListContext ------------------------------------------------------------------

css3Parser::FontFamilyNameListContext::FontFamilyNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::FontFamilyNameContext *> css3Parser::FontFamilyNameListContext::fontFamilyName() {
  return getRuleContexts<css3Parser::FontFamilyNameContext>();
}

css3Parser::FontFamilyNameContext* css3Parser::FontFamilyNameListContext::fontFamilyName(size_t i) {
  return getRuleContext<css3Parser::FontFamilyNameContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFamilyNameListContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFamilyNameListContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::FontFamilyNameListContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::FontFamilyNameListContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}


size_t css3Parser::FontFamilyNameListContext::getRuleIndex() const {
  return css3Parser::RuleFontFamilyNameList;
}

void css3Parser::FontFamilyNameListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFamilyNameList(this);
}

void css3Parser::FontFamilyNameListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFamilyNameList(this);
}


std::any css3Parser::FontFamilyNameListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFontFamilyNameList(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FontFamilyNameListContext* css3Parser::fontFamilyNameList() {
  FontFamilyNameListContext *_localctx = _tracker.createInstance<FontFamilyNameListContext>(_ctx, getState());
  enterRule(_localctx, 146, css3Parser::RuleFontFamilyNameList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1075);
    fontFamilyName();
    setState(1083);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1076);
        ws();
        setState(1077);
        match(css3Parser::Comma);
        setState(1078);
        ws();
        setState(1079);
        fontFamilyName(); 
      }
      setState(1085);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FontFamilyNameContext ------------------------------------------------------------------

css3Parser::FontFamilyNameContext::FontFamilyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FontFamilyNameContext::String_() {
  return getToken(css3Parser::String_, 0);
}

std::vector<css3Parser::IdentContext *> css3Parser::FontFamilyNameContext::ident() {
  return getRuleContexts<css3Parser::IdentContext>();
}

css3Parser::IdentContext* css3Parser::FontFamilyNameContext::ident(size_t i) {
  return getRuleContext<css3Parser::IdentContext>(i);
}

std::vector<css3Parser::WsContext *> css3Parser::FontFamilyNameContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FontFamilyNameContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}


size_t css3Parser::FontFamilyNameContext::getRuleIndex() const {
  return css3Parser::RuleFontFamilyName;
}

void css3Parser::FontFamilyNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFontFamilyName(this);
}

void css3Parser::FontFamilyNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFontFamilyName(this);
}


std::any css3Parser::FontFamilyNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFontFamilyName(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FontFamilyNameContext* css3Parser::fontFamilyName() {
  FontFamilyNameContext *_localctx = _tracker.createInstance<FontFamilyNameContext>(_ctx, getState());
  enterRule(_localctx, 148, css3Parser::RuleFontFamilyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1096);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::String_: {
        enterOuterAlt(_localctx, 1);
        setState(1086);
        match(css3Parser::String_);
        break;
      }

      case css3Parser::MediaOnly:
      case css3Parser::Not:
      case css3Parser::And:
      case css3Parser::Or:
      case css3Parser::From:
      case css3Parser::To:
      case css3Parser::Ident: {
        enterOuterAlt(_localctx, 2);
        setState(1087);
        ident();
        setState(1093);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1088);
            ws();
            setState(1089);
            ident(); 
          }
          setState(1095);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureValueBlockContext ------------------------------------------------------------------

css3Parser::FeatureValueBlockContext::FeatureValueBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::FeatureTypeContext* css3Parser::FeatureValueBlockContext::featureType() {
  return getRuleContext<css3Parser::FeatureTypeContext>(0);
}

std::vector<css3Parser::WsContext *> css3Parser::FeatureValueBlockContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FeatureValueBlockContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::FeatureValueBlockContext::OpenBrace() {
  return getToken(css3Parser::OpenBrace, 0);
}

tree::TerminalNode* css3Parser::FeatureValueBlockContext::CloseBrace() {
  return getToken(css3Parser::CloseBrace, 0);
}

std::vector<css3Parser::FeatureValueDefinitionContext *> css3Parser::FeatureValueBlockContext::featureValueDefinition() {
  return getRuleContexts<css3Parser::FeatureValueDefinitionContext>();
}

css3Parser::FeatureValueDefinitionContext* css3Parser::FeatureValueBlockContext::featureValueDefinition(size_t i) {
  return getRuleContext<css3Parser::FeatureValueDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::FeatureValueBlockContext::SemiColon() {
  return getTokens(css3Parser::SemiColon);
}

tree::TerminalNode* css3Parser::FeatureValueBlockContext::SemiColon(size_t i) {
  return getToken(css3Parser::SemiColon, i);
}


size_t css3Parser::FeatureValueBlockContext::getRuleIndex() const {
  return css3Parser::RuleFeatureValueBlock;
}

void css3Parser::FeatureValueBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeatureValueBlock(this);
}

void css3Parser::FeatureValueBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeatureValueBlock(this);
}


std::any css3Parser::FeatureValueBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFeatureValueBlock(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FeatureValueBlockContext* css3Parser::featureValueBlock() {
  FeatureValueBlockContext *_localctx = _tracker.createInstance<FeatureValueBlockContext>(_ctx, getState());
  enterRule(_localctx, 150, css3Parser::RuleFeatureValueBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1098);
    featureType();
    setState(1099);
    ws();
    setState(1100);
    match(css3Parser::OpenBrace);
    setState(1101);
    ws();
    setState(1103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & 4298375175) != 0)) {
      setState(1102);
      featureValueDefinition();
    }
    setState(1113);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 163968) != 0)) {
      setState(1105);
      ws();
      setState(1106);
      match(css3Parser::SemiColon);
      setState(1107);
      ws();
      setState(1109);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 32) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 32)) & 4298375175) != 0)) {
        setState(1108);
        featureValueDefinition();
      }
      setState(1115);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1116);
    match(css3Parser::CloseBrace);
    setState(1117);
    ws();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureTypeContext ------------------------------------------------------------------

css3Parser::FeatureTypeContext::FeatureTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::FeatureTypeContext::AtKeyword() {
  return getToken(css3Parser::AtKeyword, 0);
}


size_t css3Parser::FeatureTypeContext::getRuleIndex() const {
  return css3Parser::RuleFeatureType;
}

void css3Parser::FeatureTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeatureType(this);
}

void css3Parser::FeatureTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeatureType(this);
}


std::any css3Parser::FeatureTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFeatureType(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FeatureTypeContext* css3Parser::featureType() {
  FeatureTypeContext *_localctx = _tracker.createInstance<FeatureTypeContext>(_ctx, getState());
  enterRule(_localctx, 152, css3Parser::RuleFeatureType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1119);
    match(css3Parser::AtKeyword);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureValueDefinitionContext ------------------------------------------------------------------

css3Parser::FeatureValueDefinitionContext::FeatureValueDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::IdentContext* css3Parser::FeatureValueDefinitionContext::ident() {
  return getRuleContext<css3Parser::IdentContext>(0);
}

std::vector<css3Parser::WsContext *> css3Parser::FeatureValueDefinitionContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::FeatureValueDefinitionContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

tree::TerminalNode* css3Parser::FeatureValueDefinitionContext::Colon() {
  return getToken(css3Parser::Colon, 0);
}

std::vector<css3Parser::NumberContext *> css3Parser::FeatureValueDefinitionContext::number() {
  return getRuleContexts<css3Parser::NumberContext>();
}

css3Parser::NumberContext* css3Parser::FeatureValueDefinitionContext::number(size_t i) {
  return getRuleContext<css3Parser::NumberContext>(i);
}


size_t css3Parser::FeatureValueDefinitionContext::getRuleIndex() const {
  return css3Parser::RuleFeatureValueDefinition;
}

void css3Parser::FeatureValueDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeatureValueDefinition(this);
}

void css3Parser::FeatureValueDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeatureValueDefinition(this);
}


std::any css3Parser::FeatureValueDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitFeatureValueDefinition(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::FeatureValueDefinitionContext* css3Parser::featureValueDefinition() {
  FeatureValueDefinitionContext *_localctx = _tracker.createInstance<FeatureValueDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 154, css3Parser::RuleFeatureValueDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1121);
    ident();
    setState(1122);
    ws();
    setState(1123);
    match(css3Parser::Colon);
    setState(1124);
    ws();
    setState(1125);
    number();
    setState(1131);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1126);
        ws();
        setState(1127);
        number(); 
      }
      setState(1133);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentContext ------------------------------------------------------------------

css3Parser::IdentContext::IdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* css3Parser::IdentContext::Ident() {
  return getToken(css3Parser::Ident, 0);
}

tree::TerminalNode* css3Parser::IdentContext::MediaOnly() {
  return getToken(css3Parser::MediaOnly, 0);
}

tree::TerminalNode* css3Parser::IdentContext::Not() {
  return getToken(css3Parser::Not, 0);
}

tree::TerminalNode* css3Parser::IdentContext::And() {
  return getToken(css3Parser::And, 0);
}

tree::TerminalNode* css3Parser::IdentContext::Or() {
  return getToken(css3Parser::Or, 0);
}

tree::TerminalNode* css3Parser::IdentContext::From() {
  return getToken(css3Parser::From, 0);
}

tree::TerminalNode* css3Parser::IdentContext::To() {
  return getToken(css3Parser::To, 0);
}


size_t css3Parser::IdentContext::getRuleIndex() const {
  return css3Parser::RuleIdent;
}

void css3Parser::IdentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdent(this);
}

void css3Parser::IdentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdent(this);
}


std::any css3Parser::IdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitIdent(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::IdentContext* css3Parser::ident() {
  IdentContext *_localctx = _tracker.createInstance<IdentContext>(_ctx, getState());
  enterRule(_localctx, 156, css3Parser::RuleIdent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    _la = _input->LA(1);
    if (!(((((_la - 32) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 32)) & 4298375175) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WsContext ------------------------------------------------------------------

css3Parser::WsContext::WsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> css3Parser::WsContext::Comment() {
  return getTokens(css3Parser::Comment);
}

tree::TerminalNode* css3Parser::WsContext::Comment(size_t i) {
  return getToken(css3Parser::Comment, i);
}

std::vector<tree::TerminalNode *> css3Parser::WsContext::Space() {
  return getTokens(css3Parser::Space);
}

tree::TerminalNode* css3Parser::WsContext::Space(size_t i) {
  return getToken(css3Parser::Space, i);
}


size_t css3Parser::WsContext::getRuleIndex() const {
  return css3Parser::RuleWs;
}

void css3Parser::WsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWs(this);
}

void css3Parser::WsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWs(this);
}


std::any css3Parser::WsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitWs(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::WsContext* css3Parser::ws() {
  WsContext *_localctx = _tracker.createInstance<WsContext>(_ctx, getState());
  enterRule(_localctx, 158, css3Parser::RuleWs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1139);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1136);
        _la = _input->LA(1);
        if (!(_la == css3Parser::Comment

        || _la == css3Parser::Space)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        } 
      }
      setState(1141);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColorContext ------------------------------------------------------------------

css3Parser::ColorContext::ColorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<css3Parser::WsContext *> css3Parser::ColorContext::ws() {
  return getRuleContexts<css3Parser::WsContext>();
}

css3Parser::WsContext* css3Parser::ColorContext::ws(size_t i) {
  return getRuleContext<css3Parser::WsContext>(i);
}

std::vector<css3Parser::Color_componentContext *> css3Parser::ColorContext::color_component() {
  return getRuleContexts<css3Parser::Color_componentContext>();
}

css3Parser::Color_componentContext* css3Parser::ColorContext::color_component(size_t i) {
  return getRuleContext<css3Parser::Color_componentContext>(i);
}

std::vector<tree::TerminalNode *> css3Parser::ColorContext::Comma() {
  return getTokens(css3Parser::Comma);
}

tree::TerminalNode* css3Parser::ColorContext::Comma(size_t i) {
  return getToken(css3Parser::Comma, i);
}

tree::TerminalNode* css3Parser::ColorContext::CloseParen() {
  return getToken(css3Parser::CloseParen, 0);
}

tree::TerminalNode* css3Parser::ColorContext::Rgb() {
  return getToken(css3Parser::Rgb, 0);
}

tree::TerminalNode* css3Parser::ColorContext::Rgba() {
  return getToken(css3Parser::Rgba, 0);
}

css3Parser::Color_alphaContext* css3Parser::ColorContext::color_alpha() {
  return getRuleContext<css3Parser::Color_alphaContext>(0);
}

tree::TerminalNode* css3Parser::ColorContext::Divide() {
  return getToken(css3Parser::Divide, 0);
}


size_t css3Parser::ColorContext::getRuleIndex() const {
  return css3Parser::RuleColor;
}

void css3Parser::ColorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColor(this);
}

void css3Parser::ColorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColor(this);
}


std::any css3Parser::ColorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitColor(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::ColorContext* css3Parser::color() {
  ColorContext *_localctx = _tracker.createInstance<ColorContext>(_ctx, getState());
  enterRule(_localctx, 160, css3Parser::RuleColor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1176);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1142);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Rgb

      || _la == css3Parser::Rgba)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1143);
      ws();
      setState(1144);
      color_component();
      setState(1145);
      match(css3Parser::Comma);
      setState(1146);
      ws();
      setState(1147);
      color_component();
      setState(1148);
      match(css3Parser::Comma);
      setState(1149);
      ws();
      setState(1150);
      color_component();
      setState(1155);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == css3Parser::Comma) {
        setState(1151);
        match(css3Parser::Comma);
        setState(1152);
        ws();
        setState(1153);
        color_alpha();
      }
      setState(1157);
      match(css3Parser::CloseParen);
      setState(1158);
      ws();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1160);
      _la = _input->LA(1);
      if (!(_la == css3Parser::Rgb

      || _la == css3Parser::Rgba)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1161);
      ws();
      setState(1162);
      color_component();
      setState(1163);
      ws();
      setState(1164);
      color_component();
      setState(1165);
      ws();
      setState(1166);
      color_component();
      setState(1171);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == css3Parser::Divide) {
        setState(1167);
        match(css3Parser::Divide);
        setState(1168);
        ws();
        setState(1169);
        color_alpha();
      }
      setState(1173);
      match(css3Parser::CloseParen);
      setState(1174);
      ws();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Color_alphaContext ------------------------------------------------------------------

css3Parser::Color_alphaContext::Color_alphaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::CalcValueContext* css3Parser::Color_alphaContext::calcValue() {
  return getRuleContext<css3Parser::CalcValueContext>(0);
}

css3Parser::CalcContext* css3Parser::Color_alphaContext::calc() {
  return getRuleContext<css3Parser::CalcContext>(0);
}


size_t css3Parser::Color_alphaContext::getRuleIndex() const {
  return css3Parser::RuleColor_alpha;
}

void css3Parser::Color_alphaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColor_alpha(this);
}

void css3Parser::Color_alphaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColor_alpha(this);
}


std::any css3Parser::Color_alphaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitColor_alpha(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::Color_alphaContext* css3Parser::color_alpha() {
  Color_alphaContext *_localctx = _tracker.createInstance<Color_alphaContext>(_ctx, getState());
  enterRule(_localctx, 162, css3Parser::RuleColor_alpha);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1180);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenParen:
      case css3Parser::Percentage:
      case css3Parser::Dimension:
      case css3Parser::UnknownDimension:
      case css3Parser::Plus:
      case css3Parser::Minus:
      case css3Parser::Number: {
        enterOuterAlt(_localctx, 1);
        setState(1178);
        calcValue();
        break;
      }

      case css3Parser::Calc: {
        enterOuterAlt(_localctx, 2);
        setState(1179);
        calc();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Color_componentContext ------------------------------------------------------------------

css3Parser::Color_componentContext::Color_componentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

css3Parser::CalcValueContext* css3Parser::Color_componentContext::calcValue() {
  return getRuleContext<css3Parser::CalcValueContext>(0);
}

css3Parser::CalcContext* css3Parser::Color_componentContext::calc() {
  return getRuleContext<css3Parser::CalcContext>(0);
}


size_t css3Parser::Color_componentContext::getRuleIndex() const {
  return css3Parser::RuleColor_component;
}

void css3Parser::Color_componentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColor_component(this);
}

void css3Parser::Color_componentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<css3ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColor_component(this);
}


std::any css3Parser::Color_componentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<css3ParserVisitor*>(visitor))
    return parserVisitor->visitColor_component(this);
  else
    return visitor->visitChildren(this);
}

css3Parser::Color_componentContext* css3Parser::color_component() {
  Color_componentContext *_localctx = _tracker.createInstance<Color_componentContext>(_ctx, getState());
  enterRule(_localctx, 164, css3Parser::RuleColor_component);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1184);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case css3Parser::OpenParen:
      case css3Parser::Percentage:
      case css3Parser::Dimension:
      case css3Parser::UnknownDimension:
      case css3Parser::Plus:
      case css3Parser::Minus:
      case css3Parser::Number: {
        enterOuterAlt(_localctx, 1);
        setState(1182);
        calcValue();
        break;
      }

      case css3Parser::Calc: {
        enterOuterAlt(_localctx, 2);
        setState(1183);
        calc();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void css3Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  css3parserParserInitialize();
#else
  ::antlr4::internal::call_once(css3parserParserOnceFlag, css3parserParserInitialize);
#endif
}
