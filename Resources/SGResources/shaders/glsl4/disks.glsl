#sg_pragma once

/**const vec2 poissonDisk[32] = vec2[] (
    vec2(0.06407013, 0.05409927),
    vec2(0.7366577, 0.5789394),
    vec2(-0.6270542, -0.5320278),
    vec2(-0.4096107, 0.8411095),
    vec2(0.6849564, -0.4990818),
    vec2(-0.874181, -0.04579735),
    vec2(0.9989998, 0.0009880066),
    vec2(-0.004920578, -0.9151649),
    vec2(0.1805763, 0.9747483),
    vec2(-0.2138451, 0.2635818),
    vec2(0.109845, 0.3884785),
    vec2(0.06876755, -0.3581074),
    vec2(0.374073, -0.7661266),
    vec2(0.3079132, -0.1216763),
    vec2(-0.3794335, -0.8271583),
    vec2(-0.203878, -0.07715034),
    vec2(0.5912697, 0.1469799),
    vec2(-0.88069, 0.3031784),
    vec2(0.5040108, 0.8283722),
    vec2(-0.5844124, 0.5494877),
    vec2(0.6017799, -0.1726654),
    vec2(-0.5554981, 0.1559997),
    vec2(-0.3016369, -0.3900928),
    vec2(-0.5550632, -0.1723762),
    vec2(0.925029, 0.2995041),
    vec2(-0.2473137, 0.5538505),
    vec2(0.9183037, -0.2862392),
    vec2(0.2469421, 0.6718712),
    vec2(0.3916397, -0.4328209),
    vec2(-0.03576927, -0.6220032),
    vec2(-0.04661255, 0.7995201),
    vec2(0.4402924, 0.3640312)
);*/

/**const vec2 poissonDisk[16] = vec2[] (
    vec2(0.5912697, 0.1469799),
    vec2(-0.88069, 0.3031784),
    vec2(0.5040108, 0.8283722),
    vec2(-0.5844124, 0.5494877),
    vec2(0.6017799, -0.1726654),
    vec2(-0.5554981, 0.1559997),
    vec2(-0.3016369, -0.3900928),
    vec2(-0.5550632, -0.1723762),
    vec2(0.925029, 0.2995041),
    vec2(-0.2473137, 0.5538505),
    vec2(0.9183037, -0.2862392),
    vec2(0.2469421, 0.6718712),
    vec2(0.3916397, -0.4328209),
    vec2(-0.03576927, -0.6220032),
    vec2(-0.04661255, 0.7995201),
    vec2(0.4402924, 0.3640312)
);*/

/**vec2 poissonDisk[59] = vec2[](
    vec2(0.01020043f, 0.3103616f),
    vec2(-0.4121873f, -0.1701329f),
    vec2(0.4333374f, 0.6148015f),
    vec2(0.1092096f, -0.2437763f),
    vec2(0.6641068f, -0.1210794f),
    vec2(-0.1726627f, 0.8724736f),
    vec2(-0.8549297f, 0.2836411f),
    vec2(0.5146544f, -0.6802685f),
    vec2(0.04769185f, -0.879628f),
    vec2(-0.9373617f, -0.2187589f),
    vec2(-0.69226f, -0.6652822f),
    vec2(0.9230682f, 0.3181772f),
    vec2(-0.1565961f, 0.8773971f),
    vec2(-0.5258075f, 0.3916658f),
    vec2(0.515902f, 0.3077986f),
    vec2(-0.006838934f, 0.2577735f),
    vec2(-0.9315282f, -0.04518054f),
    vec2(-0.3417063f, -0.1195169f),
    vec2(-0.3221133f, -0.8118886f),
    vec2(0.425082f, -0.3786222f),
    vec2(0.3917231f, 0.9194779f),
    vec2(0.8819267f, -0.1306234f),
    vec2(-0.7906089f, -0.5639677f),
    vec2(0.2073919f, -0.9611396f),
    vec2(-0.05151585f, 0.3436534f),
    vec2(0.3648908f, 0.2827295f),
    vec2(-0.2478754f, 0.186921f),
    vec2(0.1171809f, 0.1482293f),
    vec2(-0.1496224f, 0.6990415f),
    vec2(-0.456594f, 0.378567f),
    vec2(-0.4242465f, -0.001935145f),
    vec2(-0.1889321f, -0.2015685f),
    vec2(0.1480272f, 0.6432338f),
    vec2(-0.5046303f, 0.8245607f),
    vec2(0.001617888f, 0.9789896f),
    vec2(-0.6228038f, 0.5963655f),
    vec2(0.4185582f, 0.7959766f),
    vec2(0.06965782f, -0.1184023f),
    vec2(-0.8310863f, 0.2197417f),
    vec2(-0.869589f, 0.4893173f),
    vec2(-0.6366982f, -0.357598f),
    vec2(-0.2509329f, -0.5531961f),
    vec2(-0.03994134f, -0.4170877f),
    vec2(-0.675245f, -0.0009701257f),
    vec2(0.3373009f, -0.4531572f),
    vec2(0.3022793f, -0.02336982f),
    vec2(0.6078352f, 0.5235748f),
    vec2(-0.9277961f, -0.05385896f),
    vec2(0.3847639f, -0.7718652f),
    vec2(0.5278201f, -0.168486f),
    vec2(0.1269102f, -0.8461399f),
    vec2(0.7260014f, -0.4588331f),
    vec2(-0.8775687f, -0.450681f),
    vec2(-0.574103f, -0.7766181f),
    vec2(0.6930821f, 0.2592674f),
    vec2(-0.3360346f, -0.8594083f),
    vec2(-0.2591985f, 0.9300818f),
    vec2(0.939391f, -0.2374034f),
    vec2(0.8332635f, 0.01952092f)

);*/

const vec2 poissonDisk[32] = vec2[] (
    vec2( -0.94201624, -0.39906216 ),
    vec2( 0.94558609, -0.76890725 ),
    vec2( -0.094184101, -0.92938870 ),
    vec2( 0.34495938, 0.29387760 ),
    vec2( -0.91588581, 0.45771432 ),
    vec2( -0.81544232, -0.87912464 ),
    vec2( -0.38277543, 0.27676845 ),
    vec2( 0.97484398, 0.75648379 ),
    vec2( 0.44323325, -0.97511554 ),
    vec2( 0.53742981, -0.47373420 ),
    vec2( -0.26496911, -0.41893023 ),
    vec2( 0.79197514, 0.19090188 ),
    vec2( -0.24188840, 0.99706507 ),
    vec2( -0.81409955, 0.91437590 ),
    vec2( 0.19984126, 0.78641367 ),
    vec2( 0.14383161, -0.14100790 ),


    vec2(-0.8682281, -0.1990303),
    vec2(-0.01973724, 0.6478714),
    vec2(-0.3897587, -0.4665619),
    vec2(-0.7416366, -0.4377831),
    vec2(-0.5523247, 0.4272514),
    vec2(-0.5325066, 0.8410385),
    vec2(0.3085465, -0.7842533),
    vec2(0.8400612, -0.200119),
    vec2(0.6632416, 0.3067062),
    vec2(-0.4462856, -0.04265022),
    vec2(0.06892014, 0.812484),
    vec2(0.5149567, -0.7502338),
    vec2(0.6464897, -0.4666451),
    vec2(-0.159861, 0.1038342),
    vec2(0.6455986, 0.04419327),
    vec2(-0.7445076, 0.5035095)
);

vec2 vogelDiskSample(int sampleIndex, int samplesCount, float phi)
{
    float GoldenAngle = 2.4f;

    float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(samplesCount));
    float theta = sampleIndex * GoldenAngle + phi;

    float sine = sin(theta);
    float cosine = cos(theta);

    return vec2(r * cosine, r * sine);
}
